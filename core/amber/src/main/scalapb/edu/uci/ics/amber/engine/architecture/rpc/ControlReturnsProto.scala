// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.rpc

object ControlReturnsProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    edu.uci.ics.amber.engine.architecture.worker.StatisticsProto,
    edu.uci.ics.amber.engine.common.WorkflowMetricsProto,
    scalapb.options.ScalapbProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      edu.uci.ics.amber.engine.architecture.rpc.ControlReturnMessage,
      edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn,
      edu.uci.ics.amber.engine.architecture.rpc.ControlException,
      edu.uci.ics.amber.engine.architecture.rpc.ReturnInvocation,
      edu.uci.ics.amber.engine.architecture.rpc.StringResponse,
      edu.uci.ics.amber.engine.architecture.rpc.IntResponse,
      edu.uci.ics.amber.engine.architecture.rpc.RetrieveWorkflowStateResponse,
      edu.uci.ics.amber.engine.architecture.rpc.FinalizeCheckpointResponse,
      edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerResponse,
      edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointResponse,
      edu.uci.ics.amber.engine.architecture.rpc.TypedValue,
      edu.uci.ics.amber.engine.architecture.rpc.EvaluatedValue,
      edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionResponse,
      edu.uci.ics.amber.engine.architecture.rpc.StartWorkflowResponse,
      edu.uci.ics.amber.engine.architecture.rpc.WorkerStateResponse,
      edu.uci.ics.amber.engine.architecture.rpc.WorkerMetricsResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cj9lZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3JwYy9jb250cm9sX3JldHVybnMucHJvdG8SKWVkdS51Y
  2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjGj1lZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL
  3dvcmtlci9zdGF0aXN0aWNzLnByb3RvGjZlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvY29tbW9uL3dvcmtmbG93X21ldHJpY3Muc
  HJvdG8aFXNjYWxhcGIvc2NhbGFwYi5wcm90byK9DgoNQ29udHJvbFJldHVybhK3AQogcmV0cmlldmVfd29ya2Zsb3dfc3RhdGVfc
  mVzcG9uc2UYASABKAsySC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5SZXRyaWV2ZVdvcmtmbG93U
  3RhdGVSZXNwb25zZUIi4j8fEh1yZXRyaWV2ZVdvcmtmbG93U3RhdGVSZXNwb25zZUgAUh1yZXRyaWV2ZVdvcmtmbG93U3RhdGVSZ
  XNwb25zZRK7AQohcHJvcGFnYXRlX2NoYW5uZWxfbWFya2VyX3Jlc3BvbnNlGAIgASgLMkkuZWR1LnVjaS5pY3MuYW1iZXIuZW5na
  W5lLmFyY2hpdGVjdHVyZS5ycGMuUHJvcGFnYXRlQ2hhbm5lbE1hcmtlclJlc3BvbnNlQiPiPyASHnByb3BhZ2F0ZUNoYW5uZWxNY
  XJrZXJSZXNwb25zZUgAUh5wcm9wYWdhdGVDaGFubmVsTWFya2VyUmVzcG9uc2USswEKH3Rha2VfZ2xvYmFsX2NoZWNrcG9pbnRfc
  mVzcG9uc2UYAyABKAsyRy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5UYWtlR2xvYmFsQ2hlY2twb
  2ludFJlc3BvbnNlQiHiPx4SHHRha2VHbG9iYWxDaGVja3BvaW50UmVzcG9uc2VIAFIcdGFrZUdsb2JhbENoZWNrcG9pbnRSZXNwb
  25zZRLDAQojZXZhbHVhdGVfcHl0aG9uX2V4cHJlc3Npb25fcmVzcG9uc2UYBCABKAsySy5lZHUudWNpLmljcy5hbWJlci5lbmdpb
  mUuYXJjaGl0ZWN0dXJlLnJwYy5FdmFsdWF0ZVB5dGhvbkV4cHJlc3Npb25SZXNwb25zZUIl4j8iEiBldmFsdWF0ZVB5dGhvbkV4c
  HJlc3Npb25SZXNwb25zZUgAUiBldmFsdWF0ZVB5dGhvbkV4cHJlc3Npb25SZXNwb25zZRKWAQoXc3RhcnRfd29ya2Zsb3dfcmVzc
  G9uc2UYBSABKAsyQC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5TdGFydFdvcmtmbG93UmVzcG9uc
  2VCGuI/FxIVc3RhcnRXb3JrZmxvd1Jlc3BvbnNlSABSFXN0YXJ0V29ya2Zsb3dSZXNwb25zZRKOAQoVd29ya2VyX3N0YXRlX3Jlc
  3BvbnNlGDIgASgLMj4uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuV29ya2VyU3RhdGVSZXNwb25zZ
  UIY4j8VEhN3b3JrZXJTdGF0ZVJlc3BvbnNlSABSE3dvcmtlclN0YXRlUmVzcG9uc2USlgEKF3dvcmtlcl9tZXRyaWNzX3Jlc3Bvb
  nNlGDMgASgLMkAuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuV29ya2VyTWV0cmljc1Jlc3BvbnNlQ
  hriPxcSFXdvcmtlck1ldHJpY3NSZXNwb25zZUgAUhV3b3JrZXJNZXRyaWNzUmVzcG9uc2USqgEKHGZpbmFsaXplX2NoZWNrcG9pb
  nRfcmVzcG9uc2UYNCABKAsyRS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5GaW5hbGl6ZUNoZWNrc
  G9pbnRSZXNwb25zZUIf4j8cEhpmaW5hbGl6ZUNoZWNrcG9pbnRSZXNwb25zZUgAUhpmaW5hbGl6ZUNoZWNrcG9pbnRSZXNwb25zZ
  RJfCgVlcnJvchhlIAEoCzI7LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbnRyb2xFeGNlcHRpb
  25CCuI/BxIFZXJyb3JIAFIFZXJyb3ISbQoMZW1wdHlfcmV0dXJuGGYgASgLMjYuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY
  2hpdGVjdHVyZS5ycGMuRW1wdHlSZXR1cm5CEOI/DRILZW1wdHlSZXR1cm5IAFILZW1wdHlSZXR1cm4SeQoPc3RyaW5nX3Jlc3Bvb
  nNlGGcgASgLMjkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuU3RyaW5nUmVzcG9uc2VCE+I/EBIOc
  3RyaW5nUmVzcG9uc2VIAFIOc3RyaW5nUmVzcG9uc2USbQoMaW50X3Jlc3BvbnNlGGggASgLMjYuZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmFyY2hpdGVjdHVyZS5ycGMuSW50UmVzcG9uc2VCEOI/DRILaW50UmVzcG9uc2VIAFILaW50UmVzcG9uc2VCDgoMc2Vhb
  GVkX3ZhbHVlIg0KC0VtcHR5UmV0dXJuIpYCChBDb250cm9sRXhjZXB0aW9uEjUKDGVycm9yTWVzc2FnZRgBIAEoCUIR4j8OEgxlc
  nJvck1lc3NhZ2VSDGVycm9yTWVzc2FnZRI1CgxlcnJvckRldGFpbHMYAiABKAlCEeI/DhIMZXJyb3JEZXRhaWxzUgxlcnJvckRld
  GFpbHMSLwoKc3RhY2tUcmFjZRgDIAEoCUIP4j8MEgpzdGFja1RyYWNlUgpzdGFja1RyYWNlEmMKCGxhbmd1YWdlGAQgASgOMjguZ
  WR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuRXJyb3JMYW5ndWFnZUIN4j8KEghsYW5ndWFnZVIIbGFuZ
  3VhZ2Ui8wEKEFJldHVybkludm9jYXRpb24SLAoJY29tbWFuZElkGAEgASgDQg7iPwsSCWNvbW1hbmRJZFIJY29tbWFuZElkEm8KC
  3JldHVyblZhbHVlGAIgASgLMjguZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29udHJvbFJldHVyb
  kIT4j8QEgtyZXR1cm5WYWx1ZfABAVILcmV0dXJuVmFsdWU6QOI/PQo7ZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5hb
  WJlcm1lc3NhZ2UuQ29udHJvbFBheWxvYWQiMgoOU3RyaW5nUmVzcG9uc2USIAoFdmFsdWUYASABKAlCCuI/BxIFdmFsdWVSBXZhb
  HVlIi8KC0ludFJlc3BvbnNlEiAKBXZhbHVlGAEgASgFQgriPwcSBXZhbHVlUgV2YWx1ZSLmAQodUmV0cmlldmVXb3JrZmxvd1N0Y
  XRlUmVzcG9uc2USdQoFc3RhdGUYASADKAsyUy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5SZXRya
  WV2ZVdvcmtmbG93U3RhdGVSZXNwb25zZS5TdGF0ZUVudHJ5QgriPwcSBXN0YXRlUgVzdGF0ZRpOCgpTdGF0ZUVudHJ5EhoKA2tle
  RgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIjsKGkZpbmFsaXplQ2hlY
  2twb2ludFJlc3BvbnNlEh0KBHNpemUYASABKANCCeI/BhIEc2l6ZVIEc2l6ZSKtAgoeUHJvcGFnYXRlQ2hhbm5lbE1hcmtlclJlc
  3BvbnNlEn4KB3JldHVybnMYASADKAsyVi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Qcm9wYWdhd
  GVDaGFubmVsTWFya2VyUmVzcG9uc2UuUmV0dXJuc0VudHJ5QgziPwkSB3JldHVybnNSB3JldHVybnMaigEKDFJldHVybnNFbnRye
  RIaCgNrZXkYASABKAlCCOI/BRIDa2V5UgNrZXkSWgoFdmFsdWUYAiABKAsyOC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJja
  Gl0ZWN0dXJlLnJwYy5Db250cm9sUmV0dXJuQgriPwcSBXZhbHVlUgV2YWx1ZToCOAEiTAocVGFrZUdsb2JhbENoZWNrcG9pbnRSZ
  XNwb25zZRIsCgl0b3RhbFNpemUYASABKANCDuI/CxIJdG90YWxTaXplUgl0b3RhbFNpemUi9QEKClR5cGVkVmFsdWUSLwoKZXhwc
  mVzc2lvbhgBIAEoCUIP4j8MEgpleHByZXNzaW9uUgpleHByZXNzaW9uEioKCXZhbHVlX3JlZhgCIAEoCUIN4j8KEgh2YWx1ZVJlZ
  lIIdmFsdWVSZWYSKgoJdmFsdWVfc3RyGAMgASgJQg3iPwoSCHZhbHVlU3RyUgh2YWx1ZVN0chItCgp2YWx1ZV90eXBlGAQgASgJQ
  g7iPwsSCXZhbHVlVHlwZVIJdmFsdWVUeXBlEi8KCmV4cGFuZGFibGUYBSABKAhCD+I/DBIKZXhwYW5kYWJsZVIKZXhwYW5kYWJsZ
  SLRAQoORXZhbHVhdGVkVmFsdWUSVwoFdmFsdWUYASABKAsyNS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlL
  nJwYy5UeXBlZFZhbHVlQgriPwcSBXZhbHVlUgV2YWx1ZRJmCgphdHRyaWJ1dGVzGAIgAygLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmFyY2hpdGVjdHVyZS5ycGMuVHlwZWRWYWx1ZUIP4j8MEgphdHRyaWJ1dGVzUgphdHRyaWJ1dGVzIoIBCiBFdmFsdWF0Z
  VB5dGhvbkV4cHJlc3Npb25SZXNwb25zZRJeCgZ2YWx1ZXMYASADKAsyOS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0Z
  WN0dXJlLnJwYy5FdmFsdWF0ZWRWYWx1ZUIL4j8IEgZ2YWx1ZXNSBnZhbHVlcyKPAQoVU3RhcnRXb3JrZmxvd1Jlc3BvbnNlEnYKD
  ndvcmtmbG93X3N0YXRlGAEgASgOMjguZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5Xb3JrZmxvd0FnZ3JlZ2F0ZWRTd
  GF0ZUIV4j8SEg13b3JrZmxvd1N0YXRl8AEBUg13b3JrZmxvd1N0YXRlInUKE1dvcmtlclN0YXRlUmVzcG9uc2USXgoFc3RhdGUYA
  SABKA4yOS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5Xb3JrZXJTdGF0ZUIN4j8KEgVzdGF0Z
  fABAVIFc3RhdGUifwoVV29ya2VyTWV0cmljc1Jlc3BvbnNlEmYKB21ldHJpY3MYASABKAsyOy5lZHUudWNpLmljcy5hbWJlci5lb
  mdpbmUuYXJjaGl0ZWN0dXJlLndvcmtlci5Xb3JrZXJNZXRyaWNzQg/iPwwSB21ldHJpY3PwAQFSB21ldHJpY3MqPwoNRXJyb3JMY
  W5ndWFnZRIXCgZQWVRIT04QABoL4j8IEgZQWVRIT04SFQoFU0NBTEEQARoK4j8HEgVTQ0FMQUIL4j8IEAFIAFgAeAFiBnByb3RvM
  w=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      edu.uci.ics.amber.engine.architecture.worker.StatisticsProto.javaDescriptor,
      edu.uci.ics.amber.engine.common.WorkflowMetricsProto.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}