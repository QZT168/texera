// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.common

@SerialVersionUID(0L)
final case class PhysicalLink(
    fromOpId: edu.uci.ics.amber.engine.common.PhysicalOpIdentity = edu.uci.ics.amber.engine.common.PhysicalOpIdentity.defaultInstance,
    fromPortId: edu.uci.ics.amber.engine.common.PortIdentity = edu.uci.ics.amber.engine.common.PortIdentity.defaultInstance,
    toOpId: edu.uci.ics.amber.engine.common.PhysicalOpIdentity = edu.uci.ics.amber.engine.common.PhysicalOpIdentity.defaultInstance,
    toPortId: edu.uci.ics.amber.engine.common.PortIdentity = edu.uci.ics.amber.engine.common.PortIdentity.defaultInstance
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PhysicalLink] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = fromOpId
        if (__value.serializedSize != 0) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = fromPortId
        if (__value.serializedSize != 0) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = toOpId
        if (__value.serializedSize != 0) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      
      {
        val __value = toPortId
        if (__value.serializedSize != 0) {
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
      };
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = fromOpId
        if (__v.serializedSize != 0) {
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = fromPortId
        if (__v.serializedSize != 0) {
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = toOpId
        if (__v.serializedSize != 0) {
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
      {
        val __v = toPortId
        if (__v.serializedSize != 0) {
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        }
      };
    }
    def withFromOpId(__v: edu.uci.ics.amber.engine.common.PhysicalOpIdentity): PhysicalLink = copy(fromOpId = __v)
    def withFromPortId(__v: edu.uci.ics.amber.engine.common.PortIdentity): PhysicalLink = copy(fromPortId = __v)
    def withToOpId(__v: edu.uci.ics.amber.engine.common.PhysicalOpIdentity): PhysicalLink = copy(toOpId = __v)
    def withToPortId(__v: edu.uci.ics.amber.engine.common.PortIdentity): PhysicalLink = copy(toPortId = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = fromOpId
          if (__t != edu.uci.ics.amber.engine.common.PhysicalOpIdentity.defaultInstance) __t else null
        }
        case 2 => {
          val __t = fromPortId
          if (__t != edu.uci.ics.amber.engine.common.PortIdentity.defaultInstance) __t else null
        }
        case 3 => {
          val __t = toOpId
          if (__t != edu.uci.ics.amber.engine.common.PhysicalOpIdentity.defaultInstance) __t else null
        }
        case 4 => {
          val __t = toPortId
          if (__t != edu.uci.ics.amber.engine.common.PortIdentity.defaultInstance) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => fromOpId.toPMessage
        case 2 => fromPortId.toPMessage
        case 3 => toOpId.toPMessage
        case 4 => toPortId.toPMessage
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToSingleLineUnicodeString(this)
    def companion: edu.uci.ics.amber.engine.common.PhysicalLink.type = edu.uci.ics.amber.engine.common.PhysicalLink
    // @@protoc_insertion_point(GeneratedMessage[edu.uci.ics.amber.engine.common.PhysicalLink])
}

object PhysicalLink extends scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.common.PhysicalLink] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[edu.uci.ics.amber.engine.common.PhysicalLink] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): edu.uci.ics.amber.engine.common.PhysicalLink = {
    var __fromOpId: _root_.scala.Option[edu.uci.ics.amber.engine.common.PhysicalOpIdentity] = _root_.scala.None
    var __fromPortId: _root_.scala.Option[edu.uci.ics.amber.engine.common.PortIdentity] = _root_.scala.None
    var __toOpId: _root_.scala.Option[edu.uci.ics.amber.engine.common.PhysicalOpIdentity] = _root_.scala.None
    var __toPortId: _root_.scala.Option[edu.uci.ics.amber.engine.common.PortIdentity] = _root_.scala.None
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __fromOpId = _root_.scala.Some(__fromOpId.fold(_root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.common.PhysicalOpIdentity](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __fromPortId = _root_.scala.Some(__fromPortId.fold(_root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.common.PortIdentity](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __toOpId = _root_.scala.Some(__toOpId.fold(_root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.common.PhysicalOpIdentity](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __toPortId = _root_.scala.Some(__toPortId.fold(_root_.scalapb.LiteParser.readMessage[edu.uci.ics.amber.engine.common.PortIdentity](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag => _input__.skipField(tag)
      }
    }
    edu.uci.ics.amber.engine.common.PhysicalLink(
        fromOpId = __fromOpId.getOrElse(edu.uci.ics.amber.engine.common.PhysicalOpIdentity.defaultInstance),
        fromPortId = __fromPortId.getOrElse(edu.uci.ics.amber.engine.common.PortIdentity.defaultInstance),
        toOpId = __toOpId.getOrElse(edu.uci.ics.amber.engine.common.PhysicalOpIdentity.defaultInstance),
        toPortId = __toPortId.getOrElse(edu.uci.ics.amber.engine.common.PortIdentity.defaultInstance)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[edu.uci.ics.amber.engine.common.PhysicalLink] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      edu.uci.ics.amber.engine.common.PhysicalLink(
        fromOpId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[edu.uci.ics.amber.engine.common.PhysicalOpIdentity]).getOrElse(edu.uci.ics.amber.engine.common.PhysicalOpIdentity.defaultInstance),
        fromPortId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[edu.uci.ics.amber.engine.common.PortIdentity]).getOrElse(edu.uci.ics.amber.engine.common.PortIdentity.defaultInstance),
        toOpId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[edu.uci.ics.amber.engine.common.PhysicalOpIdentity]).getOrElse(edu.uci.ics.amber.engine.common.PhysicalOpIdentity.defaultInstance),
        toPortId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[edu.uci.ics.amber.engine.common.PortIdentity]).getOrElse(edu.uci.ics.amber.engine.common.PortIdentity.defaultInstance)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = WorkflowProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = WorkflowProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = edu.uci.ics.amber.engine.common.PhysicalOpIdentity
      case 2 => __out = edu.uci.ics.amber.engine.common.PortIdentity
      case 3 => __out = edu.uci.ics.amber.engine.common.PhysicalOpIdentity
      case 4 => __out = edu.uci.ics.amber.engine.common.PortIdentity
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = edu.uci.ics.amber.engine.common.PhysicalLink(
    fromOpId = edu.uci.ics.amber.engine.common.PhysicalOpIdentity.defaultInstance,
    fromPortId = edu.uci.ics.amber.engine.common.PortIdentity.defaultInstance,
    toOpId = edu.uci.ics.amber.engine.common.PhysicalOpIdentity.defaultInstance,
    toPortId = edu.uci.ics.amber.engine.common.PortIdentity.defaultInstance
  )
  implicit class PhysicalLinkLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.common.PhysicalLink]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, edu.uci.ics.amber.engine.common.PhysicalLink](_l) {
    def fromOpId: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.common.PhysicalOpIdentity] = field(_.fromOpId)((c_, f_) => c_.copy(fromOpId = f_))
    def fromPortId: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.common.PortIdentity] = field(_.fromPortId)((c_, f_) => c_.copy(fromPortId = f_))
    def toOpId: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.common.PhysicalOpIdentity] = field(_.toOpId)((c_, f_) => c_.copy(toOpId = f_))
    def toPortId: _root_.scalapb.lenses.Lens[UpperPB, edu.uci.ics.amber.engine.common.PortIdentity] = field(_.toPortId)((c_, f_) => c_.copy(toPortId = f_))
  }
  final val FROM_OP_ID_FIELD_NUMBER = 1
  final val FROM_PORT_ID_FIELD_NUMBER = 2
  final val TO_OP_ID_FIELD_NUMBER = 3
  final val TO_PORT_ID_FIELD_NUMBER = 4
  def of(
    fromOpId: edu.uci.ics.amber.engine.common.PhysicalOpIdentity,
    fromPortId: edu.uci.ics.amber.engine.common.PortIdentity,
    toOpId: edu.uci.ics.amber.engine.common.PhysicalOpIdentity,
    toPortId: edu.uci.ics.amber.engine.common.PortIdentity
  ): _root_.edu.uci.ics.amber.engine.common.PhysicalLink = _root_.edu.uci.ics.amber.engine.common.PhysicalLink(
    fromOpId,
    fromPortId,
    toOpId,
    toPortId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[edu.uci.ics.amber.engine.common.PhysicalLink])
}
