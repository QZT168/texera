// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.rpc

object ControlCommandsProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    edu.uci.ics.amber.engine.common.VirtualIdentityProto,
    edu.uci.ics.amber.engine.common.WorkflowProto,
    edu.uci.ics.amber.engine.architecture.worker.StatisticsProto,
    edu.uci.ics.amber.engine.architecture.sendsemantics.PartitioningsProto,
    scalapb.options.ScalapbProto,
    com.google.protobuf.timestamp.TimestampProto,
    com.google.protobuf.any.AnyProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      edu.uci.ics.amber.engine.architecture.rpc.ControlRequestMessage,
      edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest,
      edu.uci.ics.amber.engine.architecture.rpc.AsyncRPCContext,
      edu.uci.ics.amber.engine.architecture.rpc.ControlInvocation,
      edu.uci.ics.amber.engine.architecture.rpc.ChannelMarkerPayload,
      edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerRequest,
      edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointRequest,
      edu.uci.ics.amber.engine.architecture.rpc.WorkflowReconfigureRequest,
      edu.uci.ics.amber.engine.architecture.rpc.DebugCommandRequest,
      edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionRequest,
      edu.uci.ics.amber.engine.architecture.rpc.ModifyLogicRequest,
      edu.uci.ics.amber.engine.architecture.rpc.RetryWorkflowRequest,
      edu.uci.ics.amber.engine.architecture.rpc.ConsoleMessage,
      edu.uci.ics.amber.engine.architecture.rpc.ConsoleMessageTriggeredRequest,
      edu.uci.ics.amber.engine.architecture.rpc.PortCompletedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.WorkerStateUpdatedRequest,
      edu.uci.ics.amber.engine.architecture.rpc.LinkWorkersRequest,
      edu.uci.ics.amber.engine.architecture.rpc.Ping,
      edu.uci.ics.amber.engine.architecture.rpc.Pong,
      edu.uci.ics.amber.engine.architecture.rpc.Pass,
      edu.uci.ics.amber.engine.architecture.rpc.Nested,
      edu.uci.ics.amber.engine.architecture.rpc.MultiCall,
      edu.uci.ics.amber.engine.architecture.rpc.ErrorCommand,
      edu.uci.ics.amber.engine.architecture.rpc.Collect,
      edu.uci.ics.amber.engine.architecture.rpc.GenerateNumber,
      edu.uci.ics.amber.engine.architecture.rpc.Chain,
      edu.uci.ics.amber.engine.architecture.rpc.Recursion,
      edu.uci.ics.amber.engine.architecture.rpc.AddInputChannelRequest,
      edu.uci.ics.amber.engine.architecture.rpc.AddPartitioningRequest,
      edu.uci.ics.amber.engine.architecture.rpc.AssignPortRequest,
      edu.uci.ics.amber.engine.architecture.rpc.FinalizeCheckpointRequest,
      edu.uci.ics.amber.engine.architecture.rpc.InitializeExecutorRequest,
      edu.uci.ics.amber.engine.architecture.rpc.UpdateExecutorRequest,
      edu.uci.ics.amber.engine.architecture.rpc.PrepareCheckpointRequest,
      edu.uci.ics.amber.engine.architecture.rpc.QueryStatisticsRequest
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CkBlZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3JwYy9jb250cm9sX2NvbW1hbmRzLnByb3RvEillZHUud
  WNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYxo2ZWR1L3VjaS9pY3MvYW1iZXIvZW5naW5lL2NvbW1vbi92aXJ0d
  WFsX2lkZW50aXR5LnByb3RvGi5lZHUvdWNpL2ljcy9hbWJlci9lbmdpbmUvY29tbW9uL3dvcmtmbG93LnByb3RvGj1lZHUvdWNpL
  2ljcy9hbWJlci9lbmdpbmUvYXJjaGl0ZWN0dXJlL3dvcmtlci9zdGF0aXN0aWNzLnByb3RvGkdlZHUvdWNpL2ljcy9hbWJlci9lb
  mdpbmUvYXJjaGl0ZWN0dXJlL3NlbmRzZW1hbnRpY3MvcGFydGl0aW9uaW5ncy5wcm90bxoVc2NhbGFwYi9zY2FsYXBiLnByb3RvG
  h9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGhlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvIq4fCg5Db250cm9sUmVxd
  WVzdBK3AQogcHJvcGFnYXRlX2NoYW5uZWxfbWFya2VyX3JlcXVlc3QYASABKAsySC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY
  XJjaGl0ZWN0dXJlLnJwYy5Qcm9wYWdhdGVDaGFubmVsTWFya2VyUmVxdWVzdEIi4j8fEh1wcm9wYWdhdGVDaGFubmVsTWFya2VyU
  mVxdWVzdEgAUh1wcm9wYWdhdGVDaGFubmVsTWFya2VyUmVxdWVzdBKvAQoedGFrZV9nbG9iYWxfY2hlY2twb2ludF9yZXF1ZXN0G
  AIgASgLMkYuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuVGFrZUdsb2JhbENoZWNrcG9pbnRSZXF1Z
  XN0QiDiPx0SG3Rha2VHbG9iYWxDaGVja3BvaW50UmVxdWVzdEgAUht0YWtlR2xvYmFsQ2hlY2twb2ludFJlcXVlc3QSjgEKFWRlY
  nVnX2NvbW1hbmRfcmVxdWVzdBgDIAEoCzI+LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkRlYnVnQ
  29tbWFuZFJlcXVlc3RCGOI/FRITZGVidWdDb21tYW5kUmVxdWVzdEgAUhNkZWJ1Z0NvbW1hbmRSZXF1ZXN0Er8BCiJldmFsdWF0Z
  V9weXRob25fZXhwcmVzc2lvbl9yZXF1ZXN0GAQgASgLMkouZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5yc
  GMuRXZhbHVhdGVQeXRob25FeHByZXNzaW9uUmVxdWVzdEIk4j8hEh9ldmFsdWF0ZVB5dGhvbkV4cHJlc3Npb25SZXF1ZXN0SABSH
  2V2YWx1YXRlUHl0aG9uRXhwcmVzc2lvblJlcXVlc3QSigEKFG1vZGlmeV9sb2dpY19yZXF1ZXN0GAUgASgLMj0uZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuTW9kaWZ5TG9naWNSZXF1ZXN0QhfiPxQSEm1vZGlmeUxvZ2ljUmVxdWVzd
  EgAUhJtb2RpZnlMb2dpY1JlcXVlc3QSkgEKFnJldHJ5X3dvcmtmbG93X3JlcXVlc3QYBiABKAsyPy5lZHUudWNpLmljcy5hbWJlc
  i5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5SZXRyeVdvcmtmbG93UmVxdWVzdEIZ4j8WEhRyZXRyeVdvcmtmbG93UmVxdWVzdEgAU
  hRyZXRyeVdvcmtmbG93UmVxdWVzdBK7AQohY29uc29sZV9tZXNzYWdlX3RyaWdnZXJlZF9yZXF1ZXN0GAggASgLMkkuZWR1LnVja
  S5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29uc29sZU1lc3NhZ2VUcmlnZ2VyZWRSZXF1ZXN0QiPiPyASHmNvb
  nNvbGVNZXNzYWdlVHJpZ2dlcmVkUmVxdWVzdEgAUh5jb25zb2xlTWVzc2FnZVRyaWdnZXJlZFJlcXVlc3QSkgEKFnBvcnRfY29tc
  GxldGVkX3JlcXVlc3QYCSABKAsyPy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Qb3J0Q29tcGxld
  GVkUmVxdWVzdEIZ4j8WEhRwb3J0Q29tcGxldGVkUmVxdWVzdEgAUhRwb3J0Q29tcGxldGVkUmVxdWVzdBKnAQocd29ya2VyX3N0Y
  XRlX3VwZGF0ZWRfcmVxdWVzdBgKIAEoCzJELmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLldvcmtlc
  lN0YXRlVXBkYXRlZFJlcXVlc3RCHuI/GxIZd29ya2VyU3RhdGVVcGRhdGVkUmVxdWVzdEgAUhl3b3JrZXJTdGF0ZVVwZGF0ZWRSZ
  XF1ZXN0EooBChRsaW5rX3dvcmtlcnNfcmVxdWVzdBgLIAEoCzI9LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1c
  mUucnBjLkxpbmtXb3JrZXJzUmVxdWVzdEIX4j8UEhJsaW5rV29ya2Vyc1JlcXVlc3RIAFISbGlua1dvcmtlcnNSZXF1ZXN0EpsBC
  hlhZGRfaW5wdXRfY2hhbm5lbF9yZXF1ZXN0GDIgASgLMkEuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5yc
  GMuQWRkSW5wdXRDaGFubmVsUmVxdWVzdEIb4j8YEhZhZGRJbnB1dENoYW5uZWxSZXF1ZXN0SABSFmFkZElucHV0Q2hhbm5lbFJlc
  XVlc3QSmgEKGGFkZF9wYXJ0aXRpb25pbmdfcmVxdWVzdBgzIAEoCzJBLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY
  3R1cmUucnBjLkFkZFBhcnRpdGlvbmluZ1JlcXVlc3RCG+I/GBIWYWRkUGFydGl0aW9uaW5nUmVxdWVzdEgAUhZhZGRQYXJ0aXRpb
  25pbmdSZXF1ZXN0EoYBChNhc3NpZ25fcG9ydF9yZXF1ZXN0GDQgASgLMjwuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpd
  GVjdHVyZS5ycGMuQXNzaWduUG9ydFJlcXVlc3RCFuI/ExIRYXNzaWduUG9ydFJlcXVlc3RIAFIRYXNzaWduUG9ydFJlcXVlc3QSp
  gEKG2ZpbmFsaXplX2NoZWNrcG9pbnRfcmVxdWVzdBg1IAEoCzJELmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1c
  mUucnBjLkZpbmFsaXplQ2hlY2twb2ludFJlcXVlc3RCHuI/GxIZZmluYWxpemVDaGVja3BvaW50UmVxdWVzdEgAUhlmaW5hbGl6Z
  UNoZWNrcG9pbnRSZXF1ZXN0EqYBChtpbml0aWFsaXplX2V4ZWN1dG9yX3JlcXVlc3QYNiABKAsyRC5lZHUudWNpLmljcy5hbWJlc
  i5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5Jbml0aWFsaXplRXhlY3V0b3JSZXF1ZXN0Qh7iPxsSGWluaXRpYWxpemVFeGVjdXRvc
  lJlcXVlc3RIAFIZaW5pdGlhbGl6ZUV4ZWN1dG9yUmVxdWVzdBKWAQoXdXBkYXRlX2V4ZWN1dG9yX3JlcXVlc3QYNyABKAsyQC5lZ
  HUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5VcGRhdGVFeGVjdXRvclJlcXVlc3RCGuI/FxIVdXBkYXRlR
  XhlY3V0b3JSZXF1ZXN0SABSFXVwZGF0ZUV4ZWN1dG9yUmVxdWVzdBJxCg1lbXB0eV9yZXF1ZXN0GDggASgLMjcuZWR1LnVjaS5pY
  3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuRW1wdHlSZXF1ZXN0QhHiPw4SDGVtcHR5UmVxdWVzdEgAUgxlbXB0eVJlc
  XVlc3QSogEKGnByZXBhcmVfY2hlY2twb2ludF9yZXF1ZXN0GDkgASgLMkMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpd
  GVjdHVyZS5ycGMuUHJlcGFyZUNoZWNrcG9pbnRSZXF1ZXN0Qh3iPxoSGHByZXBhcmVDaGVja3BvaW50UmVxdWVzdEgAUhhwcmVwY
  XJlQ2hlY2twb2ludFJlcXVlc3QSmgEKGHF1ZXJ5X3N0YXRpc3RpY3NfcmVxdWVzdBg6IAEoCzJBLmVkdS51Y2kuaWNzLmFtYmVyL
  mVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlF1ZXJ5U3RhdGlzdGljc1JlcXVlc3RCG+I/GBIWcXVlcnlTdGF0aXN0aWNzUmVxdWVzd
  EgAUhZxdWVyeVN0YXRpc3RpY3NSZXF1ZXN0ElAKBHBpbmcYZCABKAsyLy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0Z
  WN0dXJlLnJwYy5QaW5nQgniPwYSBHBpbmdIAFIEcGluZxJQCgRwb25nGGUgASgLMi8uZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mFyY2hpdGVjdHVyZS5ycGMuUG9uZ0IJ4j8GEgRwb25nSABSBHBvbmcSWAoGbmVzdGVkGGYgASgLMjEuZWR1LnVjaS5pY3MuYW1iZ
  XIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuTmVzdGVkQgviPwgSBm5lc3RlZEgAUgZuZXN0ZWQSUAoEcGFzcxhnIAEoCzIvLmVkd
  S51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlBhc3NCCeI/BhIEcGFzc0gAUgRwYXNzEnEKDWVycm9yX2Nvb
  W1hbmQYaCABKAsyNy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnJwYy5FcnJvckNvbW1hbmRCEeI/DhIMZ
  XJyb3JDb21tYW5kSABSDGVycm9yQ29tbWFuZBJkCglyZWN1cnNpb24YaSABKAsyNC5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY
  XJjaGl0ZWN0dXJlLnJwYy5SZWN1cnNpb25CDuI/CxIJcmVjdXJzaW9uSABSCXJlY3Vyc2lvbhJcCgdjb2xsZWN0GGogASgLMjIuZ
  WR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ29sbGVjdEIM4j8JEgdjb2xsZWN0SABSB2NvbGxlY3QSe
  QoPZ2VuZXJhdGVfbnVtYmVyGGsgASgLMjkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuR2VuZXJhd
  GVOdW1iZXJCE+I/EBIOZ2VuZXJhdGVOdW1iZXJIAFIOZ2VuZXJhdGVOdW1iZXISZQoKbXVsdGlfY2FsbBhsIAEoCzI0LmVkdS51Y
  2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLk11bHRpQ2FsbEIO4j8LEgltdWx0aUNhbGxIAFIJbXVsdGlDYWxsE
  lQKBWNoYWluGG0gASgLMjAuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ2hhaW5CCuI/BxIFY2hha
  W5IAFIFY2hhaW5CDgoMc2VhbGVkX3ZhbHVlIg4KDEVtcHR5UmVxdWVzdCLcAQoPQXN5bmNSUENDb250ZXh0El0KBnNlbmRlchgBI
  AEoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCDuI/CxIGc2VuZGVy8AEBU
  gZzZW5kZXISYwoIcmVjZWl2ZXIYAiABKAsyNS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkFjdG9yVmlydHVhbElkZ
  W50aXR5QhDiPw0SCHJlY2VpdmVy8AEBUghyZWNlaXZlcjoF4j8COAEigAMKEUNvbnRyb2xJbnZvY2F0aW9uEjAKC21ldGhvZF9uY
  W1lGAEgASgJQg/iPwwSCm1ldGhvZE5hbWVSCm1ldGhvZE5hbWUSZAoHY29tbWFuZBgCIAEoCzI5LmVkdS51Y2kuaWNzLmFtYmVyL
  mVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbnRyb2xSZXF1ZXN0Qg/iPwwSB2NvbW1hbmTwAQFSB2NvbW1hbmQSYgoHY29udGV4d
  BgDIAEoCzI6LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkFzeW5jUlBDQ29udGV4dEIM4j8JEgdjb
  250ZXh0Ugdjb250ZXh0Ei0KCmNvbW1hbmRfaWQYBCABKANCDuI/CxIJY29tbWFuZElkUgljb21tYW5kSWQ6QOI/PQo7ZWR1LnVja
  S5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5hbWJlcm1lc3NhZ2UuQ29udHJvbFBheWxvYWQiqAUKFENoYW5uZWxNYXJrZXJQYXlsb
  2FkElIKAmlkGAEgASgLMjYuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5DaGFubmVsTWFya2VySWRlbnRpdHlCCuI/B
  xICaWTwAQFSAmlkEm4KC21hcmtlcl90eXBlGAIgASgOMjwuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5yc
  GMuQ2hhbm5lbE1hcmtlclR5cGVCD+I/DBIKbWFya2VyVHlwZVIKbWFya2VyVHlwZRJSCgVzY29wZRgDIAMoCzIwLmVkdS51Y2kua
  WNzLmFtYmVyLmVuZ2luZS5jb21tb24uQ2hhbm5lbElkZW50aXR5QgriPwcSBXNjb3BlUgVzY29wZRKRAQoPY29tbWFuZF9tYXBwa
  W5nGAQgAygLMlMuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS5ycGMuQ2hhbm5lbE1hcmtlclBheWxvYWQuQ
  29tbWFuZE1hcHBpbmdFbnRyeUIT4j8QEg5jb21tYW5kTWFwcGluZ1IOY29tbWFuZE1hcHBpbmcalQEKE0NvbW1hbmRNYXBwaW5nR
  W50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5El4KBXZhbHVlGAIgASgLMjwuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lL
  mFyY2hpdGVjdHVyZS5ycGMuQ29udHJvbEludm9jYXRpb25CCuI/BxIFdmFsdWVSBXZhbHVlOgI4ATpM4j9JCkdlZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuY29tbW9uLmFtYmVybWVzc2FnZS5Xb3JrZmxvd0ZJRk9NZXNzYWdlUGF5bG9hZCLfBQodUHJvcGFnYXRlQ
  2hhbm5lbE1hcmtlclJlcXVlc3QSgwEKF3NvdXJjZV9vcF90b19zdGFydF9wcm9wGAEgAygLMjMuZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmNvbW1vbi5QaHlzaWNhbE9wSWRlbnRpdHlCGOI/FRITc291cmNlT3BUb1N0YXJ0UHJvcFITc291cmNlT3BUb1N0YXJ0U
  HJvcBJSCgJpZBgCIAEoCzI2LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQ2hhbm5lbE1hcmtlcklkZW50aXR5QgriP
  wcSAmlk8AEBUgJpZBJuCgttYXJrZXJfdHlwZRgDIAEoDjI8LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUuc
  nBjLkNoYW5uZWxNYXJrZXJUeXBlQg/iPwwSCm1hcmtlclR5cGVSCm1hcmtlclR5cGUSVQoFc2NvcGUYBCADKAsyMy5lZHUudWNpL
  mljcy5hbWJlci5lbmdpbmUuY29tbW9uLlBoeXNpY2FsT3BJZGVudGl0eUIK4j8HEgVzY29wZVIFc2NvcGUSYgoKdGFyZ2V0X29wc
  xgFIAMoCzIzLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uUGh5c2ljYWxPcElkZW50aXR5Qg7iPwsSCXRhcmdldE9wc
  1IJdGFyZ2V0T3BzEnQKDm1hcmtlcl9jb21tYW5kGAYgASgLMjkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZ
  S5ycGMuQ29udHJvbFJlcXVlc3RCEuI/DxINbWFya2VyQ29tbWFuZFINbWFya2VyQ29tbWFuZBJDChJtYXJrZXJfbWV0aG9kX25hb
  WUYByABKAlCFeI/EhIQbWFya2VyTWV0aG9kTmFtZVIQbWFya2VyTWV0aG9kTmFtZSKCAgobVGFrZUdsb2JhbENoZWNrcG9pbnRSZ
  XF1ZXN0EjwKD2VzdGltYXRpb25fb25seRgBIAEoCEIT4j8QEg5lc3RpbWF0aW9uT25seVIOZXN0aW1hdGlvbk9ubHkScQoNY2hlY
  2twb2ludF9pZBgCIAEoCzI2LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQ2hhbm5lbE1hcmtlcklkZW50aXR5QhTiP
  xESDGNoZWNrcG9pbnRJZPABAVIMY2hlY2twb2ludElkEjIKC2Rlc3RpbmF0aW9uGAMgASgJQhDiPw0SC2Rlc3RpbmF0aW9uUgtkZ
  XN0aW5hdGlvbiLmAQoaV29ya2Zsb3dSZWNvbmZpZ3VyZVJlcXVlc3QSgAEKD3JlY29uZmlndXJhdGlvbhgBIAEoCzI9LmVkdS51Y
  2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLk1vZGlmeUxvZ2ljUmVxdWVzdEIX4j8UEg9yZWNvbmZpZ3VyYXRpb
  27wAQFSD3JlY29uZmlndXJhdGlvbhJFChJyZWNvbmZpZ3VyYXRpb25faWQYAiABKAlCFuI/ExIRcmVjb25maWd1cmF0aW9uSWRSE
  XJlY29uZmlndXJhdGlvbklkIl0KE0RlYnVnQ29tbWFuZFJlcXVlc3QSKgoJd29ya2VyX2lkGAEgASgJQg3iPwoSCHdvcmtlcklkU
  gh3b3JrZXJJZBIaCgNjbWQYAiABKAlCCOI/BRIDY21kUgNjbWQihAEKH0V2YWx1YXRlUHl0aG9uRXhwcmVzc2lvblJlcXVlc3QSL
  woKZXhwcmVzc2lvbhgBIAEoCUIP4j8MEgpleHByZXNzaW9uUgpleHByZXNzaW9uEjAKC29wZXJhdG9yX2lkGAIgASgJQg/iPwwSC
  m9wZXJhdG9ySWRSCm9wZXJhdG9ySWQikQEKEk1vZGlmeUxvZ2ljUmVxdWVzdBJ7Cg51cGRhdGVfcmVxdWVzdBgBIAMoCzJALmVkd
  S51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLlVwZGF0ZUV4ZWN1dG9yUmVxdWVzdEIS4j8PEg11cGRhdGVSZ
  XF1ZXN0Ug11cGRhdGVSZXF1ZXN0InUKFFJldHJ5V29ya2Zsb3dSZXF1ZXN0El0KB3dvcmtlcnMYASADKAsyNS5lZHUudWNpLmljc
  y5hbWJlci5lbmdpbmUuY29tbW9uLkFjdG9yVmlydHVhbElkZW50aXR5QgziPwkSB3dvcmtlcnNSB3dvcmtlcnMiowMKDkNvbnNvb
  GVNZXNzYWdlEioKCXdvcmtlcl9pZBgBIAEoCUIN4j8KEgh3b3JrZXJJZFIId29ya2VySWQSSwoJdGltZXN0YW1wGAIgASgLMhouZ
  29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIR4j8OEgl0aW1lc3RhbXDwAQFSCXRpbWVzdGFtcBJmCghtc2dfdHlwZRgDIAEoDjI9L
  mVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbnNvbGVNZXNzYWdlVHlwZUIM4j8JEgdtc2dUeXBlU
  gdtc2dUeXBlEiMKBnNvdXJjZRgEIAEoCUIL4j8IEgZzb3VyY2VSBnNvdXJjZRIgCgV0aXRsZRgFIAEoCUIK4j8HEgV0aXRsZVIFd
  Gl0bGUSJgoHbWVzc2FnZRgGIAEoCUIM4j8JEgdtZXNzYWdlUgdtZXNzYWdlOkHiPz4KPGVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZ
  S5hcmNoaXRlY3R1cmUuY29udHJvbGxlci5DbGllbnRFdmVudCKcAQoeQ29uc29sZU1lc3NhZ2VUcmlnZ2VyZWRSZXF1ZXN0EnoKD
  2NvbnNvbGVfbWVzc2FnZRgBIAEoCzI5LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkNvbnNvbGVNZ
  XNzYWdlQhbiPxMSDmNvbnNvbGVNZXNzYWdl8AEBUg5jb25zb2xlTWVzc2FnZSKQAQoUUG9ydENvbXBsZXRlZFJlcXVlc3QSVgoHc
  G9ydF9pZBgBIAEoCzItLmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uUG9ydElkZW50aXR5Qg7iPwsSBnBvcnRJZPABA
  VIGcG9ydElkEiAKBWlucHV0GAIgASgIQgriPwcSBWlucHV0UgVpbnB1dCJ7ChlXb3JrZXJTdGF0ZVVwZGF0ZWRSZXF1ZXN0El4KB
  XN0YXRlGAEgASgOMjkuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmFyY2hpdGVjdHVyZS53b3JrZXIuV29ya2VyU3RhdGVCDeI/C
  hIFc3RhdGXwAQFSBXN0YXRlImUKEkxpbmtXb3JrZXJzUmVxdWVzdBJPCgRsaW5rGAEgASgLMi0uZWR1LnVjaS5pY3MuYW1iZXIuZ
  W5naW5lLmNvbW1vbi5QaHlzaWNhbExpbmtCDOI/CRIEbGlua/ABAVIEbGluayKLAQoEUGluZxIUCgFpGAEgASgFQgbiPwMSAWlSA
  WkSGgoDZW5kGAIgASgFQgjiPwUSA2VuZFIDZW5kElEKAnRvGAMgASgLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vb
  i5BY3RvclZpcnR1YWxJZGVudGl0eUIK4j8HEgJ0b/ABAVICdG8iiwEKBFBvbmcSFAoBaRgBIAEoBUIG4j8DEgFpUgFpEhoKA2VuZ
  BgCIAEoBUII4j8FEgNlbmRSA2VuZBJRCgJ0bxgDIAEoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWa
  XJ0dWFsSWRlbnRpdHlCCuI/BxICdG/wAQFSAnRvIigKBFBhc3MSIAoFdmFsdWUYASABKAlCCuI/BxIFdmFsdWVSBXZhbHVlIh4KB
  k5lc3RlZBIUCgFrGAEgASgFQgbiPwMSAWtSAWsiXgoJTXVsdGlDYWxsElEKA3NlcRgBIAMoCzI1LmVkdS51Y2kuaWNzLmFtYmVyL
  mVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCCOI/BRIDc2VxUgNzZXEiDgoMRXJyb3JDb21tYW5kImgKB0NvbGxlY
  3QSXQoHd29ya2VycxgBIAMoCzI1LmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCD
  OI/CRIHd29ya2Vyc1IHd29ya2VycyIQCg5HZW5lcmF0ZU51bWJlciJgCgVDaGFpbhJXCgVuZXh0cxgBIAMoCzI1LmVkdS51Y2kua
  WNzLmFtYmVyLmVuZ2luZS5jb21tb24uQWN0b3JWaXJ0dWFsSWRlbnRpdHlCCuI/BxIFbmV4dHNSBW5leHRzIiEKCVJlY3Vyc2lvb
  hIUCgFpGAEgASgFQgbiPwMSAWlSAWki1AEKFkFkZElucHV0Q2hhbm5lbFJlcXVlc3QSYgoKY2hhbm5lbF9pZBgBIAEoCzIwLmVkd
  S51Y2kuaWNzLmFtYmVyLmVuZ2luZS5jb21tb24uQ2hhbm5lbElkZW50aXR5QhHiPw4SCWNoYW5uZWxJZPABAVIJY2hhbm5lbElkE
  lYKB3BvcnRfaWQYAiABKAsyLS5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLlBvcnRJZGVudGl0eUIO4j8LEgZwb3J0S
  WTwAQFSBnBvcnRJZCLjAQoWQWRkUGFydGl0aW9uaW5nUmVxdWVzdBJMCgN0YWcYASABKAsyLS5lZHUudWNpLmljcy5hbWJlci5lb
  mdpbmUuY29tbW9uLlBoeXNpY2FsTGlua0IL4j8IEgN0YWfwAQFSA3RhZxJ7CgxwYXJ0aXRpb25pbmcYAiABKAsyQS5lZHUudWNpL
  mljcy5hbWJlci5lbmdpbmUuYXJjaGl0ZWN0dXJlLnNlbmRzZW1hbnRpY3MuUGFydGl0aW9uaW5nQhTiPxESDHBhcnRpdGlvbmluZ
  /ABAVIMcGFydGl0aW9uaW5nIs0CChFBc3NpZ25Qb3J0UmVxdWVzdBJWCgdwb3J0X2lkGAEgASgLMi0uZWR1LnVjaS5pY3MuYW1iZ
  XIuZW5naW5lLmNvbW1vbi5Qb3J0SWRlbnRpdHlCDuI/CxIGcG9ydElk8AEBUgZwb3J0SWQSIAoFaW5wdXQYAiABKAhCCuI/BxIFa
  W5wdXRSBWlucHV0Em0KBnNjaGVtYRgDIAMoCzJILmVkdS51Y2kuaWNzLmFtYmVyLmVuZ2luZS5hcmNoaXRlY3R1cmUucnBjLkFzc
  2lnblBvcnRSZXF1ZXN0LlNjaGVtYUVudHJ5QgviPwgSBnNjaGVtYVIGc2NoZW1hGk8KC1NjaGVtYUVudHJ5EhoKA2tleRgBIAEoC
  UII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIrcBChlGaW5hbGl6ZUNoZWNrcG9pb
  nRSZXF1ZXN0EnEKDWNoZWNrcG9pbnRfaWQYASABKAsyNi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLkNoYW5uZWxNY
  XJrZXJJZGVudGl0eUIU4j8REgxjaGVja3BvaW50SWTwAQFSDGNoZWNrcG9pbnRJZBInCgh3cml0ZV90bxgCIAEoCUIM4j8JEgd3c
  ml0ZVRvUgd3cml0ZVRvIpACChlJbml0aWFsaXplRXhlY3V0b3JSZXF1ZXN0EkMKEnRvdGFsX3dvcmtlcl9jb3VudBgBIAEoBUIV4
  j8SEhB0b3RhbFdvcmtlckNvdW50UhB0b3RhbFdvcmtlckNvdW50ElcKEW9wX2V4ZWNfaW5pdF9pbmZvGAIgASgLMhQuZ29vZ2xlL
  nByb3RvYnVmLkFueUIW4j8TEg5vcEV4ZWNJbml0SW5mb/ABAVIOb3BFeGVjSW5pdEluZm8SKgoJaXNfc291cmNlGAMgASgIQg3iP
  woSCGlzU291cmNlUghpc1NvdXJjZRIpCghsYW5ndWFnZRgEIAEoCUIN4j8KEghsYW5ndWFnZVIIbGFuZ3VhZ2UirgIKFVVwZGF0Z
  UV4ZWN1dG9yUmVxdWVzdBJpCgx0YXJnZXRfb3BfaWQYASABKAsyMy5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY29tbW9uLlBoe
  XNpY2FsT3BJZGVudGl0eUIS4j8PEgp0YXJnZXRPcElk8AEBUgp0YXJnZXRPcElkEkwKDG5ld19leGVjdXRvchgCIAEoCzIULmdvb
  2dsZS5wcm90b2J1Zi5BbnlCE+I/EBILbmV3RXhlY3V0b3LwAQFSC25ld0V4ZWN1dG9yElwKE3N0YXRlX3RyYW5zZmVyX2Z1bmMYA
  yABKAsyFC5nb29nbGUucHJvdG9idWYuQW55QhbiPxMSEXN0YXRlVHJhbnNmZXJGdW5jUhFzdGF0ZVRyYW5zZmVyRnVuYyLLAQoYU
  HJlcGFyZUNoZWNrcG9pbnRSZXF1ZXN0EnEKDWNoZWNrcG9pbnRfaWQYASABKAsyNi5lZHUudWNpLmljcy5hbWJlci5lbmdpbmUuY
  29tbW9uLkNoYW5uZWxNYXJrZXJJZGVudGl0eUIU4j8REgxjaGVja3BvaW50SWTwAQFSDGNoZWNrcG9pbnRJZBI8Cg9lc3RpbWF0a
  W9uX29ubHkYAiABKAhCE+I/EBIOZXN0aW1hdGlvbk9ubHlSDmVzdGltYXRpb25Pbmx5IpEBChZRdWVyeVN0YXRpc3RpY3NSZXF1Z
  XN0EncKEWZpbHRlcl9ieV93b3JrZXJzGAEgAygLMjUuZWR1LnVjaS5pY3MuYW1iZXIuZW5naW5lLmNvbW1vbi5BY3RvclZpcnR1Y
  WxJZGVudGl0eUIU4j8REg9maWx0ZXJCeVdvcmtlcnNSD2ZpbHRlckJ5V29ya2VycypnChFDaGFubmVsTWFya2VyVHlwZRItChFSR
  VFVSVJFX0FMSUdOTUVOVBAAGhbiPxMSEVJFUVVJUkVfQUxJR05NRU5UEiMKDE5PX0FMSUdOTUVOVBABGhHiPw4SDE5PX0FMSUdOT
  UVOVCp6ChJDb25zb2xlTWVzc2FnZVR5cGUSFQoFUFJJTlQQABoK4j8HEgVQUklOVBIVCgVFUlJPUhABGgriPwcSBUVSUk9SEhkKB
  0NPTU1BTkQQAhoM4j8JEgdDT01NQU5EEhsKCERFQlVHR0VSEAMaDeI/ChIIREVCVUdHRVJCC+I/CBABSABYAHgBYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      edu.uci.ics.amber.engine.common.VirtualIdentityProto.javaDescriptor,
      edu.uci.ics.amber.engine.common.WorkflowProto.javaDescriptor,
      edu.uci.ics.amber.engine.architecture.worker.StatisticsProto.javaDescriptor,
      edu.uci.ics.amber.engine.architecture.sendsemantics.PartitioningsProto.javaDescriptor,
      scalapb.options.ScalapbProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.protobuf.any.AnyProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}