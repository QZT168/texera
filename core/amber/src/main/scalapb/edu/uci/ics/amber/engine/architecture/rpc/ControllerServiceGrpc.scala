// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package edu.uci.ics.amber.engine.architecture.rpc


object ControllerServiceGrpc {
  val METHOD_RETRIEVE_WORKFLOW_STATE: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, edu.uci.ics.amber.engine.architecture.rpc.RetrieveWorkflowStateResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "RetrieveWorkflowState"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.RetrieveWorkflowStateResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_PROPAGATE_CHANNEL_MARKER: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerRequest, edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "PropagateChannelMarker"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_TAKE_GLOBAL_CHECKPOINT: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointRequest, edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "TakeGlobalCheckpoint"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_DEBUG_COMMAND: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.DebugCommandRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "DebugCommand"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.DebugCommandRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_EVALUATE_PYTHON_EXPRESSION: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionRequest, edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "EvaluatePythonExpression"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val METHOD_CONSOLE_MESSAGE_TRIGGERED: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.ConsoleMessageTriggeredRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "ConsoleMessageTriggered"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.ConsoleMessageTriggeredRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(5)))
      .build()
  
  val METHOD_PORT_COMPLETED: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.PortCompletedRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "PortCompleted"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.PortCompletedRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(6)))
      .build()
  
  val METHOD_START_WORKFLOW: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, edu.uci.ics.amber.engine.architecture.rpc.StartWorkflowResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "StartWorkflow"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.StartWorkflowResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(7)))
      .build()
  
  val METHOD_RESUME_WORKFLOW: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "ResumeWorkflow"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(8)))
      .build()
  
  val METHOD_PAUSE_WORKFLOW: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "PauseWorkflow"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(9)))
      .build()
  
  val METHOD_WORKER_STATE_UPDATED: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.WorkerStateUpdatedRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "WorkerStateUpdated"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.WorkerStateUpdatedRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(10)))
      .build()
  
  val METHOD_WORKER_EXECUTION_COMPLETED: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "WorkerExecutionCompleted"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(11)))
      .build()
  
  val METHOD_LINK_WORKERS: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.LinkWorkersRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "LinkWorkers"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.LinkWorkersRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(12)))
      .build()
  
  val METHOD_CONTROLLER_INITIATE_QUERY_STATISTICS: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.QueryStatisticsRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "ControllerInitiateQueryStatistics"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.QueryStatisticsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(13)))
      .build()
  
  val METHOD_RETRY_WORKFLOW: _root_.io.grpc.MethodDescriptor[edu.uci.ics.amber.engine.architecture.rpc.RetryWorkflowRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("edu.uci.ics.amber.engine.architecture.rpc.ControllerService", "RetryWorkflow"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.RetryWorkflowRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0).getMethods().get(14)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("edu.uci.ics.amber.engine.architecture.rpc.ControllerService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor))
      .addMethod(METHOD_RETRIEVE_WORKFLOW_STATE)
      .addMethod(METHOD_PROPAGATE_CHANNEL_MARKER)
      .addMethod(METHOD_TAKE_GLOBAL_CHECKPOINT)
      .addMethod(METHOD_DEBUG_COMMAND)
      .addMethod(METHOD_EVALUATE_PYTHON_EXPRESSION)
      .addMethod(METHOD_CONSOLE_MESSAGE_TRIGGERED)
      .addMethod(METHOD_PORT_COMPLETED)
      .addMethod(METHOD_START_WORKFLOW)
      .addMethod(METHOD_RESUME_WORKFLOW)
      .addMethod(METHOD_PAUSE_WORKFLOW)
      .addMethod(METHOD_WORKER_STATE_UPDATED)
      .addMethod(METHOD_WORKER_EXECUTION_COMPLETED)
      .addMethod(METHOD_LINK_WORKERS)
      .addMethod(METHOD_CONTROLLER_INITIATE_QUERY_STATISTICS)
      .addMethod(METHOD_RETRY_WORKFLOW)
      .build()
  
  trait ControllerService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = ControllerService
    def retrieveWorkflowState(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.RetrieveWorkflowStateResponse]
    def propagateChannelMarker(request: edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerResponse]
    def takeGlobalCheckpoint(request: edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointResponse]
    def debugCommand(request: edu.uci.ics.amber.engine.architecture.rpc.DebugCommandRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]
    def evaluatePythonExpression(request: edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionResponse]
    def consoleMessageTriggered(request: edu.uci.ics.amber.engine.architecture.rpc.ConsoleMessageTriggeredRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]
    def portCompleted(request: edu.uci.ics.amber.engine.architecture.rpc.PortCompletedRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]
    def startWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.StartWorkflowResponse]
    def resumeWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]
    def pauseWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]
    def workerStateUpdated(request: edu.uci.ics.amber.engine.architecture.rpc.WorkerStateUpdatedRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]
    def workerExecutionCompleted(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]
    def linkWorkers(request: edu.uci.ics.amber.engine.architecture.rpc.LinkWorkersRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]
    def controllerInitiateQueryStatistics(request: edu.uci.ics.amber.engine.architecture.rpc.QueryStatisticsRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]
    def retryWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.RetryWorkflowRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]
  }
  
  object ControllerService extends _root_.scalapb.grpc.ServiceCompanion[ControllerService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ControllerService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: ControllerService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_RETRIEVE_WORKFLOW_STATE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, edu.uci.ics.amber.engine.architecture.rpc.RetrieveWorkflowStateResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.RetrieveWorkflowStateResponse]): _root_.scala.Unit =
            serviceImpl.retrieveWorkflowState(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_PROPAGATE_CHANNEL_MARKER,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerRequest, edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerResponse]): _root_.scala.Unit =
            serviceImpl.propagateChannelMarker(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_TAKE_GLOBAL_CHECKPOINT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointRequest, edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointResponse]): _root_.scala.Unit =
            serviceImpl.takeGlobalCheckpoint(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_DEBUG_COMMAND,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.DebugCommandRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.DebugCommandRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]): _root_.scala.Unit =
            serviceImpl.debugCommand(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_EVALUATE_PYTHON_EXPRESSION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionRequest, edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionResponse]): _root_.scala.Unit =
            serviceImpl.evaluatePythonExpression(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_CONSOLE_MESSAGE_TRIGGERED,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.ConsoleMessageTriggeredRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.ConsoleMessageTriggeredRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]): _root_.scala.Unit =
            serviceImpl.consoleMessageTriggered(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_PORT_COMPLETED,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.PortCompletedRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.PortCompletedRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]): _root_.scala.Unit =
            serviceImpl.portCompleted(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_START_WORKFLOW,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, edu.uci.ics.amber.engine.architecture.rpc.StartWorkflowResponse] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.StartWorkflowResponse]): _root_.scala.Unit =
            serviceImpl.startWorkflow(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_RESUME_WORKFLOW,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]): _root_.scala.Unit =
            serviceImpl.resumeWorkflow(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_PAUSE_WORKFLOW,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]): _root_.scala.Unit =
            serviceImpl.pauseWorkflow(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_WORKER_STATE_UPDATED,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.WorkerStateUpdatedRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.WorkerStateUpdatedRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]): _root_.scala.Unit =
            serviceImpl.workerStateUpdated(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_WORKER_EXECUTION_COMPLETED,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]): _root_.scala.Unit =
            serviceImpl.workerExecutionCompleted(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_LINK_WORKERS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.LinkWorkersRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.LinkWorkersRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]): _root_.scala.Unit =
            serviceImpl.linkWorkers(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_CONTROLLER_INITIATE_QUERY_STATISTICS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.QueryStatisticsRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.QueryStatisticsRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]): _root_.scala.Unit =
            serviceImpl.controllerInitiateQueryStatistics(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_RETRY_WORKFLOW,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[edu.uci.ics.amber.engine.architecture.rpc.RetryWorkflowRequest, edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] {
          override def invoke(request: edu.uci.ics.amber.engine.architecture.rpc.RetryWorkflowRequest, observer: _root_.io.grpc.stub.StreamObserver[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn]): _root_.scala.Unit =
            serviceImpl.retryWorkflow(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait ControllerServiceBlockingClient {
    def serviceCompanion = ControllerService
    def retrieveWorkflowState(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): edu.uci.ics.amber.engine.architecture.rpc.RetrieveWorkflowStateResponse
    def propagateChannelMarker(request: edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerRequest): edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerResponse
    def takeGlobalCheckpoint(request: edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointRequest): edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointResponse
    def debugCommand(request: edu.uci.ics.amber.engine.architecture.rpc.DebugCommandRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn
    def evaluatePythonExpression(request: edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionRequest): edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionResponse
    def consoleMessageTriggered(request: edu.uci.ics.amber.engine.architecture.rpc.ConsoleMessageTriggeredRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn
    def portCompleted(request: edu.uci.ics.amber.engine.architecture.rpc.PortCompletedRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn
    def startWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): edu.uci.ics.amber.engine.architecture.rpc.StartWorkflowResponse
    def resumeWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn
    def pauseWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn
    def workerStateUpdated(request: edu.uci.ics.amber.engine.architecture.rpc.WorkerStateUpdatedRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn
    def workerExecutionCompleted(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn
    def linkWorkers(request: edu.uci.ics.amber.engine.architecture.rpc.LinkWorkersRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn
    def controllerInitiateQueryStatistics(request: edu.uci.ics.amber.engine.architecture.rpc.QueryStatisticsRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn
    def retryWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.RetryWorkflowRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn
  }
  
  class ControllerServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ControllerServiceBlockingStub](channel, options) with ControllerServiceBlockingClient {
    override def retrieveWorkflowState(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): edu.uci.ics.amber.engine.architecture.rpc.RetrieveWorkflowStateResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_RETRIEVE_WORKFLOW_STATE, options, request)
    }
    
    override def propagateChannelMarker(request: edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerRequest): edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_PROPAGATE_CHANNEL_MARKER, options, request)
    }
    
    override def takeGlobalCheckpoint(request: edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointRequest): edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_TAKE_GLOBAL_CHECKPOINT, options, request)
    }
    
    override def debugCommand(request: edu.uci.ics.amber.engine.architecture.rpc.DebugCommandRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DEBUG_COMMAND, options, request)
    }
    
    override def evaluatePythonExpression(request: edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionRequest): edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_EVALUATE_PYTHON_EXPRESSION, options, request)
    }
    
    override def consoleMessageTriggered(request: edu.uci.ics.amber.engine.architecture.rpc.ConsoleMessageTriggeredRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CONSOLE_MESSAGE_TRIGGERED, options, request)
    }
    
    override def portCompleted(request: edu.uci.ics.amber.engine.architecture.rpc.PortCompletedRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_PORT_COMPLETED, options, request)
    }
    
    override def startWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): edu.uci.ics.amber.engine.architecture.rpc.StartWorkflowResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_START_WORKFLOW, options, request)
    }
    
    override def resumeWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_RESUME_WORKFLOW, options, request)
    }
    
    override def pauseWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_PAUSE_WORKFLOW, options, request)
    }
    
    override def workerStateUpdated(request: edu.uci.ics.amber.engine.architecture.rpc.WorkerStateUpdatedRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_WORKER_STATE_UPDATED, options, request)
    }
    
    override def workerExecutionCompleted(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_WORKER_EXECUTION_COMPLETED, options, request)
    }
    
    override def linkWorkers(request: edu.uci.ics.amber.engine.architecture.rpc.LinkWorkersRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LINK_WORKERS, options, request)
    }
    
    override def controllerInitiateQueryStatistics(request: edu.uci.ics.amber.engine.architecture.rpc.QueryStatisticsRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CONTROLLER_INITIATE_QUERY_STATISTICS, options, request)
    }
    
    override def retryWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.RetryWorkflowRequest): edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_RETRY_WORKFLOW, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ControllerServiceBlockingStub = new ControllerServiceBlockingStub(channel, options)
  }
  
  class ControllerServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ControllerServiceStub](channel, options) with ControllerService {
    override def retrieveWorkflowState(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.RetrieveWorkflowStateResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_RETRIEVE_WORKFLOW_STATE, options, request)
    }
    
    override def propagateChannelMarker(request: edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.PropagateChannelMarkerResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_PROPAGATE_CHANNEL_MARKER, options, request)
    }
    
    override def takeGlobalCheckpoint(request: edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.TakeGlobalCheckpointResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_TAKE_GLOBAL_CHECKPOINT, options, request)
    }
    
    override def debugCommand(request: edu.uci.ics.amber.engine.architecture.rpc.DebugCommandRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DEBUG_COMMAND, options, request)
    }
    
    override def evaluatePythonExpression(request: edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EvaluatePythonExpressionResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_EVALUATE_PYTHON_EXPRESSION, options, request)
    }
    
    override def consoleMessageTriggered(request: edu.uci.ics.amber.engine.architecture.rpc.ConsoleMessageTriggeredRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CONSOLE_MESSAGE_TRIGGERED, options, request)
    }
    
    override def portCompleted(request: edu.uci.ics.amber.engine.architecture.rpc.PortCompletedRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_PORT_COMPLETED, options, request)
    }
    
    override def startWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.StartWorkflowResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_START_WORKFLOW, options, request)
    }
    
    override def resumeWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_RESUME_WORKFLOW, options, request)
    }
    
    override def pauseWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_PAUSE_WORKFLOW, options, request)
    }
    
    override def workerStateUpdated(request: edu.uci.ics.amber.engine.architecture.rpc.WorkerStateUpdatedRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_WORKER_STATE_UPDATED, options, request)
    }
    
    override def workerExecutionCompleted(request: edu.uci.ics.amber.engine.architecture.rpc.EmptyRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_WORKER_EXECUTION_COMPLETED, options, request)
    }
    
    override def linkWorkers(request: edu.uci.ics.amber.engine.architecture.rpc.LinkWorkersRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LINK_WORKERS, options, request)
    }
    
    override def controllerInitiateQueryStatistics(request: edu.uci.ics.amber.engine.architecture.rpc.QueryStatisticsRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CONTROLLER_INITIATE_QUERY_STATISTICS, options, request)
    }
    
    override def retryWorkflow(request: edu.uci.ics.amber.engine.architecture.rpc.RetryWorkflowRequest): scala.concurrent.Future[edu.uci.ics.amber.engine.architecture.rpc.EmptyReturn] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_RETRY_WORKFLOW, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ControllerServiceStub = new ControllerServiceStub(channel, options)
  }
  
  object ControllerServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[ControllerServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ControllerServiceStub = new ControllerServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[ControllerServiceStub] = this
  }
  
  def bindService(serviceImpl: ControllerService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = ControllerService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): ControllerServiceBlockingStub = new ControllerServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): ControllerServiceStub = new ControllerServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = edu.uci.ics.amber.engine.architecture.rpc.ControllerServiceProto.javaDescriptor.getServices().get(0)
  
}