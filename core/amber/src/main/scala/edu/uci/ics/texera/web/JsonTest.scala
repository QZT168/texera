package edu.uci.ics.texera.web

import edu.uci.ics.amber.engine.architecture.common.{LogicalExecutionSnapshot, ProcessingHistory}
import edu.uci.ics.texera.web.service.{ReplayCheckpointPlanner, WorkflowReplayManager}

import java.io.{FileInputStream, ObjectInputStream}
import java.nio.file.{Files, Paths}
import scala.collection.mutable
import scala.util.Random

object JsonTest {

  def main(args: Array[String]): Unit = {


    val file = Paths.get("").resolve("latest-interation-history")
    if(!Files.exists(file)){
      println("no interaction history found!")
      return
    }
    val ois = new ObjectInputStream(new FileInputStream(file.toFile))
    var history = ois.readObject.asInstanceOf[ProcessingHistory]
    ois.close()

    history.historyArray.foreach{
      i =>
        var cost = 0L
        try{
          cost = history.getSnapshot(i).checkpointCost
        }catch{
          case x: Throwable =>
        }
        println(i+" "+cost)
    }
//    println("-----------------------------------------------")
//    history.historyArray.foreach {
//      i =>
//        val cost = history.getSnapshot(i).getCheckpointCost(ActorVirtualIdentity("Worker:WF1-SortPartitions-operator-4e18bee2-0a12-4478-9482-9bf1a7d32efb-main-0"))
//        println(cost)
//    }
//    println("-----------------------------------------------")
    // W1
    val time_w1 = Array(3940,8056,10764,12217,15638,17288,19525,22156,26060,30080,33184,37889,39003,41601,42931,46261,49437,53125,55370,60299,62482,63804,67566,69306,73970,75668,79948,82107,86139,89086,92034,95652,100079,101267,105434,108268,111859,115617,120583,122641,127368,131582,133099,136425,140231,142920,145546,147070,151093,153096,156511,160077,164182,166565,168350,169879,173988,175636,177594,178820,182740,187670,189585,193101,197730,201312,203723,205678,209415,210984,215733,217792,219730,221082,224774,228314,233068,236501,238262,239798,243261,244526,248939,251692,253008,255910,258310,259745,264155,268051,269884,273812,277428,280973,283216,284313,286860,291426,294311,295963,297617,301041,305574,308997,313280,314715,316476,321138,322186,326941,330639,331979,334439,336797,339160,340964,343233,344626,346173,348681,351790,353562,354812,358121,361695,363161,367097,369273,370591,375357,379061,380653,385582,388046,391601,393097,394617,398046,399375,400393,405313,407954,412912,416939,418914,421978,426606,429940,431112,432545,434367,439290,440428,442989,445765,449569,452791,454129,457606,459291,462159,465626,467465,470573,474476,475486,480057,483109,484383,488057,489976,494762,498971,502643,503985,505507,507523,511370,512758,517464,519080,522437,527329,531137,535235,536525)
    val cost_w1 = Array(2324085, 2373945, 2532910, 2302865, 2359305, 2475465, 2530605, 2712850, 2547375, 2457860, 2681070, 2253175, 2572190, 2528785, 2496375, 2423270, 2719795, 2418545, 2281105, 2264240, 2515105, 2271635, 2399465, 2673925, 2406375, 2514795, 2418375, 2557825, 2499400, 2529960, 2739520, 2515230, 2288210, 2488240, 2355880, 2497970, 2524285, 2672940, 2441215, 2632070, 2368400, 2527915, 2453175, 2496260, 2756530, 2644720, 2794650, 2423925, 2363835, 2581665, 2316515, 2431070, 2767650, 2589195, 2341410, 2566375, 2384320, 2368225, 2488090, 2564200, 2510065, 2404675, 2416030, 2740405, 2347920, 2516045, 2579530, 2558160, 2274220, 2383520, 2267180, 2793820, 2283835, 2302070, 2620825, 2653025, 2334065, 2330095, 2533360, 2412545, 2658485, 2655675, 2400440, 2602475, 2497320, 2619230, 2430515, 2665340, 2587805, 2394485, 2355255, 2535775, 2699995, 2658115, 2705065, 2442365, 2663260, 2268855, 2630805, 2364045, 2803825, 2533545, 2584875, 2746555, 2718615, 2714005, 2393175, 2724540, 2286690, 2530805, 2367495, 2295110, 2684445, 2761375, 2396145, 2795810, 2291860, 2326305, 2628200, 2664135, 2760675, 2294835, 2716060, 2590555, 2412550, 2730040, 2447285, 2310215, 2520385, 2659895, 2588620, 2725810, 2436790, 2668240, 2432535, 2378660, 2714895, 2585000, 2417435, 2584965, 2399590, 2397450, 2639735, 2688945, 2553320, 2438250, 2631140, 2388910, 2596155, 2710145, 2351980, 2658885, 2708505, 2621750, 2661555, 2743000, 2574370, 2746155, 2503275, 2366400, 2534870, 2376365, 2313105, 2631400, 2435655, 2627365, 2483095, 2269220, 2407680, 2727740, 2432695, 2696745, 2394120, 2583385, 2422835, 2744295, 2377180, 2486195, 2417620, 2272770, 2394925, 2346315, 2631625, 2331930, 2391940, 2282290)
    // W2
    val time_w2 = Array(3000, 6000, 9000, 12000, 15000, 18000, 21000, 24000, 27000, 30000, 33000, 36000, 39000, 42000, 45000, 48000, 51000, 54000, 57000, 60000, 63000, 66000, 69000, 72000, 75000, 78000, 81000, 84000, 87000, 90000, 93000, 96000, 99000, 102000, 105000, 108000, 111000, 114000, 117000, 120000, 123000, 126000, 129000, 132000, 135000, 138000, 141000, 144000, 147000, 150000, 153000, 156000, 159000, 162000, 165000, 168000, 171000, 174000, 177000, 180000, 183000, 186000, 189000, 192000, 195000, 198000, 201000, 204000, 207000, 210000, 213000, 216000, 219000, 222000, 225000, 228000, 231000, 234000, 237000, 240000, 243000, 246000, 249000, 252000, 255000, 258000, 261000, 264000, 267000, 270000, 273000, 276000, 279000, 282000, 285000, 288000, 291000, 294000, 297000, 300000, 303000, 306000, 309000, 312000, 315000, 318000, 321000, 324000, 327000, 330000, 333000, 336000, 339000, 342000, 345000, 348000, 351000, 354000, 357000, 360000, 363000, 366000, 369000, 372000, 375000, 378000, 381000, 384000, 387000, 390000, 393000, 396000)
    val cost_w2 = Array(16706655, 33413310, 50119965, 66826620, 83533275, 100239930, 116946585, 133653240, 150359895, 167066550, 179909465, 192722528, 205535592, 218348655, 231161719, 243974783, 256787846, 269600910, 282413973, 295227037, 306439188, 317638971, 328838754, 340038537, 351238320, 362438103, 373637886, 384837669, 396037452, 407237235, 418855401, 430476800, 442098198, 453719596, 465340995, 476962393, 488583791, 500205190, 511826588, 523447986, 519266603, 514963130, 510659656, 506356182, 502052709, 497749235, 493445762, 489142288, 484838814, 480535341, 480485656, 480468836, 480452016, 480435196, 480418376, 480401556, 480384735, 480367915, 480351095, 480334275, 480348004, 480361979, 480375954, 480389929, 480403905, 480417880, 480431855, 480445830, 480459805, 480473781, 480466723, 480459495, 480452268, 480445040, 480437812, 480430585, 480423357, 480416130, 480408902, 480401674, 480400205, 480398782, 480397360, 480395937, 480394514, 480393091, 480391669, 480390246, 480388823, 480387400, 480385778, 480384153, 480382529, 480380904, 480379280, 480377656, 480376031, 480374407, 480372782, 480371158, 480369534, 480367909, 480366285, 480364660, 480363036, 480361412, 480359787, 480358163, 480356538, 480354914, 480353290, 480351665, 480350041, 480348416, 480346792, 480345168, 480343543, 480341919, 480340294, 480338670, 480337046, 480335421, 480333797, 480332172, 480330548, 480328924, 480327299, 480325675, 480324050, 480322426, 480320802, 480319177)
    // W3
    val time_w3 = Array(5042,10043,15043,20043,25044,30044,35044,40044,45044,50044,55045,60046,65046,70046,75046,80046,85047,90047,95047,100047,105047,110047,115048,120048,125048,130048,135048,140048,145048,150049,155049,160049,165049,170049,175050,180050,185050,190050,195050,200050)
    val cost_w3 = Array(12448695, 11464780, 12532625, 14718630, 15860640, 15408750, 16877270, 16565190, 20132540, 19740375, 22711640, 21429610, 22827655, 24647855, 23395405, 26522870, 27455135, 26796740, 27606165, 29177490, 5729570, 10741860, 11996340, 14877240, 16132090, 18923705, 16015395, 19297980, 22000940, 22473040, 16129850, 17054175, 20884660, 22505725, 20222060, 16988705, 19644880, 21500395, 24884500, 16549435)

    // W4
    var time_w4 = Array(4021,7080,10629,15117,18421,20848,24511,27511,30782,32234,34490,37472,38854,41715,46449,49640,52345,55959,60432,62574,67016,69387,73249,76685,79723,81757,83145,84322,86300,91144,93665,95226,98363,102144,106729,108779,113695,116578,120533,123507,128161,129740,134029,137650,141088,142880,144028,146154,148569,153398,157078,159790,161077,164144,165633,167074,170895,174270,175588,179976,182369,183734,187895,192649,195013,197142,201554,205203,207083,210324,213687,218491,220223,224366,225696,228554,232481,234931,239042,243919,246971,249744,253205,256256,260281,262644,267432,269459,273404,277654,281453,286355,287796,289619,290968,294792,298470,300762,304829,309362,311681,315922,318601,319869,320984,324765,327833,332714,334595,338061,339591,342565,344930,347275,349860,352775,355176,358052,362557,363668,367112,371488,375992,379100,380203,381464,384364,385880,389593,392979,394309,398967,399994,403113,405416,410310,414907,419833,422908,424027,426451,430762,434730,436284,439818,443978,447967,449105,450922,452514,454920,459861,464170,466341)
    var cost_w4 = Array(2545917,3431650,4858122,6440349,7740036,8733887,9974710,11277661,12353372,12654327,13779411,14820511,15358185,16456640,20748636,22117720,22861276,24313269,25694117,26739016,28386767,29063692,30768522,32226359,33359664,34628421,35556460,36140347,36894451,38962769,43591838,44435514,45486169,46698109,48587165,48960440,50913829,51685784,52949221,53940836,55560998,56148074,57653349,58531354,59638365,60238812,60381792,61647687,62015556,63882401,65056364,66051352,66642999,68780806,69191458,68894405,70727667,71727551,71759078,73040709,73784776,73794332,75035149,76716952,76550494,76885079,78814398,80238411,80482418,81769944,82332517,83568352,83642813,85354148,85530980,85587298,87399559,87919193,89037271,90402942,91270804,90962938,90799260,90802522,90826979,90808151,90770371,90753169,90776454,90758760,90727507,90707737,90699927,90714601,90713294,90680132,90646300,90626150,90617322,71225124,71219806,71214213,71185273,71182356,71185279,71179243,71200401,71170778,71179431,71130750,71138926,71122006,71117890,71089462,71100999,71077499,71076666,71058286,71045446,71054062,71040169,50523488,50569784,50603295,50596946,50590043,50572426,50578200,50554286,50533120,50546699,50524390,50527776,50533661,50530123,50534521,32684309,32722854,32710424,32711421,32636166,32704767,32693265,32706945,32704894,16245658,16265829,16234664,16267753,16294134,16257419,16264314,16253559,16262021)
    time_w4 = time_w4.map(_/4)
    cost_w4 = cost_w4.map(_*5)
    // W5
    var time_w5 = Array(4303,6615,10517,12301,14803,18836,22863,26594,29723,33764,37209,40920,44076,47870,51733,52906,56626,60313,63818,66329,70415,72414,77063,78541,80625,82487,84140,87872,89608,93067,94366,99010,102837,104755,106318,110353,114967,116901,118756,121473,125623,129368,134296,137613,139380,141105,144994,149472,151357,152624,156720,160298,163349,168112,170779,175751)
    var cost_w5 = Array(444249,513774,554852,604887,553371,497138,834093,666159,583983,644848,654938,789496,675389,789378,612416,731975,613430,716599,777768,548716,677727,617464,678518,685203,875794,815075,728216,575313,669076,623753,738658,775204,726069,583472,583637,724410,601499,575263,651975,629833,757159,577481,649234,806671,778126,771790,541306,571874,692005,617287,687170,703601,616441,614216,683867,692928)
    time_w5 = time_w5.map(_ * 3)
    cost_w5 = cost_w5.map(_ * 5)

    compareOptimalCheckpoints(time_w1, cost_w1)
    compareOptimalCheckpoints(time_w2, cost_w2)
    compareOptimalCheckpoints(time_w3, cost_w3)
    compareOptimalCheckpoints(time_w4, cost_w4)
    compareOptimalCheckpoints(time_w5, cost_w5)

    def compareOptimalCheckpoints(time:Array[Int], cost:Array[Int]): Unit = {
      val history1 = new ProcessingHistory()
      val history2 = new ProcessingHistory()
      time.indices.foreach {
        i =>
          val interaction = Random.nextInt(100) < 20
          val snapshot = new LogicalExecutionSnapshot(i.toString, interaction, time(i))
          snapshot.checkpointCost = cost(i)
          history1.addSnapshot(time(i), snapshot)
          if(interaction){
            history2.addSnapshot(time(i), snapshot)
          }
      }
      val planner1 = new ReplayCheckpointPlanner(history1, 60000)
      val planner2 = new ReplayCheckpointPlanner(history2, 60000)
      val plan1 = planner1.getGlobalPlan(0, history1.historyArray.length, 60000)
      val plan2 = planner2.getGlobalPlan(0, history2.historyArray.length, 60000)
      println(plan1.map(i => {
        history1.getPlanCost(i)
      }).sum)
      println(plan2.map(i => {
        history2.getPlanCost(i)
      }).sum)
    }

    history = new ProcessingHistory()

    val planner = new ReplayCheckpointPlanner(history, 5000)
    val timelimits = Array(5000, 10000, 20000, 30000, 60000)
    timelimits.foreach{
      timelimit =>
        println("tau = "+timelimit+"---------------")
        var last = 0L
        var idx = 0
        val chkptset = mutable.ArrayBuffer[Int]()
        history.historyArray.foreach {
          i =>
            if(history.getSnapshot(i).isInteraction){
              val to_chkpt = i - last > timelimit
              if (to_chkpt) {
                last = i
                chkptset.append(idx)
              }
            }
            idx += 1
        }
        val plan3 = planner.getGlobalPlan(0, history.historyArray.length, timelimit)
        println(plan3.map(i => {
          history.getPlanCost(i)
        }).sum)
        println(chkptset.map(i => {
          history.getPlanCost(i)
        }).sum)
        println((0 until idx).map(i => {
          history.getPlanCost(i)
        }).sum)
    }
  }
}

class JsonTest {}
