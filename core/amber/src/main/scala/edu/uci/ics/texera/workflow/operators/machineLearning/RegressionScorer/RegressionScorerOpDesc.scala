package edu.uci.ics.texera.workflow.operators.machineLearning.RegressionScorer

import com.fasterxml.jackson.annotation.{JsonProperty, JsonPropertyDescription}
import com.kjetland.jackson.jsonSchema.annotations.JsonSchemaTitle
import edu.uci.ics.amber.engine.common.workflow.{InputPort, OutputPort}
import edu.uci.ics.texera.workflow.common.metadata.{OperatorGroupConstants, OperatorInfo}
import edu.uci.ics.texera.workflow.common.metadata.annotations.AutofillAttributeName
import edu.uci.ics.texera.workflow.common.operators.PythonOperatorDescriptor
import edu.uci.ics.texera.workflow.common.tuple.schema.{Attribute, AttributeType, Schema}

class RegressionScorerOpDesc extends PythonOperatorDescriptor {
  @JsonProperty(required = true)
  @JsonSchemaTitle("Actual Value")
  @JsonPropertyDescription("Specify the label column")
  @AutofillAttributeName
  var actualValueColumn: String = ""

  @JsonProperty(required = true)
  @JsonSchemaTitle("Predicted Value")
  @JsonPropertyDescription("Specify the attribute generated by the model")
  @AutofillAttributeName
  var predictValueColumn: String = ""

  @JsonProperty(required = true)
  @JsonSchemaTitle("Scorer Functions")
  @JsonPropertyDescription("Select multiple score functions")
  var scorers: List[RegressionScorerFunction] = List()

  override def operatorInfo: OperatorInfo =
    OperatorInfo(
    "RegressionScorer",
    "Scorer for machine learning regression",
    OperatorGroupConstants.ML_GROUP,
    inputPorts = List(InputPort()),
    outputPorts = List(OutputPort())
    )

    override def generatePythonCode(): String = {
      val finalcode =
        s"""
           |from pytexera import *
           |import pandas as pd
           |import numpy as np
           |from sklearn.metrics import mean_squared_error
           |from sklearn.metrics import root_mean_squared_error
           |from sklearn.metrics import mean_absolute_error
           |from sklearn.metrics import r2_score
           |
           |
           |class ProcessTableOperator(UDFTableOperator):
           |
           |    @overrides
           |    def process_table(self, table: Table, port: int) -> Iterator[Optional[TableLike]]:
           |      result = dict()
           |      y_true = table['$actualValueColumn'][0]
           |      y_pred = table['$predictValueColumn'][0]
           |
           |      scorerList = [${getSelectedScorers()}]
           |
           |      for scorer in scorerList:
           |        if scorer == "MSE":
           |          result["MSE"] = mean_squared_error(y_true, y_pred)
           |        elif scorer == "RMSE":
           |          result["RMSE"] = root_mean_squared_error(y_true, y_pred)
           |        elif scorer == "MAE":
           |          result["MAE"] = mean_absolute_error(y_true, y_pred)
           |        elif scorer == "R2":
           |          result["R2"] = r2_score(y_true, y_pred)
           |
           |      paraStrSeries = pd.Series(table['para'].tolist())
           |      table = table.drop(['para'], axis=1)
           |      table['para'] = paraStrSeries
           |
           |
           |      resultDf = pd.DataFrame(result, index=[0])
           |
           |      resultDf = pd.concat([resultDf, table], axis=1)
           |
           |      if "Iteration" in resultDf.columns:
           |        resultDf['Iteration'] = resultDf['Iteration'].astype(int)
           |
           |      yield resultDf
           |
           |""".stripMargin
      finalcode
    }

  override def getOutputSchema(schemas: Array[Schema]): Schema = {
    val outputSchemaBuilder = Schema.newBuilder
    val inputSchema = schemas(0)
    scorers.map(scorer => getEachScorerName(scorer)).foreach(scorer => {
      outputSchemaBuilder.add(new Attribute(scorer, AttributeType.DOUBLE))
    }
    )
    outputSchemaBuilder.add(inputSchema)
    outputSchemaBuilder.removeIfExists("para")
    outputSchemaBuilder.add(new Attribute("para", AttributeType.STRING))
    outputSchemaBuilder.build
  }
  private def getEachScorerName(scorer: RegressionScorerFunction): String = {
    // Directly return the name of the scorer using the getName() method
    scorer.getName()
  }

  private def getSelectedScorers(): String = {
    // Return a string of scorers using the getEachScorerName() method
    scorers.map(scorer => getEachScorerName(scorer)).mkString("'", "','", "'")
  }

}
