/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.web.model.jooq.generated.tables.records;


import edu.uci.ics.texera.web.model.jooq.generated.tables.DatasetOfUser;
import edu.uci.ics.texera.web.model.jooq.generated.tables.interfaces.IDatasetOfUser;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DatasetOfUserRecord extends UpdatableRecordImpl<DatasetOfUserRecord> implements Record3<UInteger, UInteger, Byte>, IDatasetOfUser {

    private static final long serialVersionUID = 1517546280;

    /**
     * Setter for <code>texera_db.dataset_of_user.did</code>.
     */
    @Override
    public void setDid(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>texera_db.dataset_of_user.did</code>.
     */
    @Override
    public UInteger getDid() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>texera_db.dataset_of_user.uid</code>.
     */
    @Override
    public void setUid(UInteger value) {
        set(1, value);
    }

    /**
     * Getter for <code>texera_db.dataset_of_user.uid</code>.
     */
    @Override
    public UInteger getUid() {
        return (UInteger) get(1);
    }

    /**
     * Setter for <code>texera_db.dataset_of_user.access_level</code>.
     */
    @Override
    public void setAccessLevel(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>texera_db.dataset_of_user.access_level</code>.
     */
    @Override
    public Byte getAccessLevel() {
        return (Byte) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UInteger, UInteger> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UInteger, UInteger, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UInteger, UInteger, Byte> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UInteger> field1() {
        return DatasetOfUser.DATASET_OF_USER.DID;
    }

    @Override
    public Field<UInteger> field2() {
        return DatasetOfUser.DATASET_OF_USER.UID;
    }

    @Override
    public Field<Byte> field3() {
        return DatasetOfUser.DATASET_OF_USER.ACCESS_LEVEL;
    }

    @Override
    public UInteger component1() {
        return getDid();
    }

    @Override
    public UInteger component2() {
        return getUid();
    }

    @Override
    public Byte component3() {
        return getAccessLevel();
    }

    @Override
    public UInteger value1() {
        return getDid();
    }

    @Override
    public UInteger value2() {
        return getUid();
    }

    @Override
    public Byte value3() {
        return getAccessLevel();
    }

    @Override
    public DatasetOfUserRecord value1(UInteger value) {
        setDid(value);
        return this;
    }

    @Override
    public DatasetOfUserRecord value2(UInteger value) {
        setUid(value);
        return this;
    }

    @Override
    public DatasetOfUserRecord value3(Byte value) {
        setAccessLevel(value);
        return this;
    }

    @Override
    public DatasetOfUserRecord values(UInteger value1, UInteger value2, Byte value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDatasetOfUser from) {
        setDid(from.getDid());
        setUid(from.getUid());
        setAccessLevel(from.getAccessLevel());
    }

    @Override
    public <E extends IDatasetOfUser> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DatasetOfUserRecord
     */
    public DatasetOfUserRecord() {
        super(DatasetOfUser.DATASET_OF_USER);
    }

    /**
     * Create a detached, initialised DatasetOfUserRecord
     */
    public DatasetOfUserRecord(UInteger did, UInteger uid, Byte accessLevel) {
        super(DatasetOfUser.DATASET_OF_USER);

        set(0, did);
        set(1, uid);
        set(2, accessLevel);
    }
}
