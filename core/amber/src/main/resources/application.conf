constants {
    logging-queue-size-interval = 30000
    num-worker-per-operator = 2
    max-resolution-rows = 2000
    max-resolution-columns = 2000
    status-update-interval = 500
}

flow-control {
    max-credit-allowed-in-bytes-per-channel = 1600000000  # -1 to disable flow control
    credit-poll-interval-in-ms = 200
}

network-buffering {
    default-data-transfer-batch-size = 400
    enable-adaptive-buffering = true
    adaptive-buffering-timeout-ms = 500
}

reconfiguration {
    enable-transactional-reconfiguration = true
}

cache {
    # [false, true]
    enabled = true
}

user-sys {
    enabled = true
    google {
        clientId = ""
        clientSecret = ""
	smtp {
            gmail = ""
            password = ""
        }
    }
    version-time-limit-in-minutes = 60
    jwt {
        exp-in-days = 30
        # generate the secret again for each deployment using the following:
        # 'openssl rand -hex 16'  or  'xxd -l16 -ps /dev/urandom'
        256-bit-secret = "5259e3eb6a58cb89b53790406c24c8f5"
    }
}

result-cleanup {
    ttl-in-seconds = 3600 # time to live for a collection is 2 days
    collection-check-interval-in-seconds = 3600 # 2 days
}

web-server {
    workflow-state-cleanup-in-seconds = 3600
    python-console-buffer-size = 100
    workflow-result-pulling-in-seconds = 3
    clean-all-execution-results-on-server-start = false
}

fault-tolerance {
    # URI for storage, empty to disable logging.
    # Use absolute path only. for local file system, $AMBER_FOLDER will be interpolated to Amber folder path.
    # e.g. use "file://$AMBER_FOLDER/../log/recovery-logs/" for local logging.
    log-storage-uri = ""
    log-flush-interval-ms = 0 # immediately flush
    log-record-max-size-in-byte = 67108864 #64MB
    # limit for resend buffer length, if the resend buffer
    # getting too large, the workflow aborts during recovery to avoid OOM.
    # TODO: Remove this after introducing checkpoints.
    max-supported-resend-queue-length = 10000
    delay-before-recovery = 3000
    hdfs-storage{
        address = "0.0.0.0:9870"
    }
}

schedule-generator {
    enable-cost-based-schedule-generator = true
    use-global-search = false
    use-top-down-search = false
    search-timeout-milliseconds = 1000
}

ai-assistant-server{
    assistant = "none"
    # Put your Ai Service authentication key here
    ai-service-key = ""
    # Put your Ai service url here (If you are using OpenAI, then the url should be "https://api.openai.com/v1")
    ai-service-url = ""
}
