/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables.records;


import edu.uci.ics.texera.dao.jooq.generated.tables.OperatorRuntimeStatistics;
import edu.uci.ics.texera.dao.jooq.generated.tables.interfaces.IOperatorRuntimeStatistics;

import java.sql.Timestamp;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperatorRuntimeStatisticsRecord extends UpdatableRecordImpl<OperatorRuntimeStatisticsRecord> implements Record9<Long, Timestamp, Long, Long, Short, Long, Long, Long, Integer>, IOperatorRuntimeStatistics {

    private static final long serialVersionUID = 484834822;

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.operator_execution_id</code>.
     */
    @Override
    public void setOperatorExecutionId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.operator_execution_id</code>.
     */
    @Override
    public Long getOperatorExecutionId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.time</code>.
     */
    @Override
    public void setTime(Timestamp value) {
        set(1, value);
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.time</code>.
     */
    @Override
    public Timestamp getTime() {
        return (Timestamp) get(1);
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.input_tuple_cnt</code>.
     */
    @Override
    public void setInputTupleCnt(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.input_tuple_cnt</code>.
     */
    @Override
    public Long getInputTupleCnt() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.output_tuple_cnt</code>.
     */
    @Override
    public void setOutputTupleCnt(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.output_tuple_cnt</code>.
     */
    @Override
    public Long getOutputTupleCnt() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.status</code>.
     */
    @Override
    public void setStatus(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.status</code>.
     */
    @Override
    public Short getStatus() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.data_processing_time</code>.
     */
    @Override
    public void setDataProcessingTime(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.data_processing_time</code>.
     */
    @Override
    public Long getDataProcessingTime() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.control_processing_time</code>.
     */
    @Override
    public void setControlProcessingTime(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.control_processing_time</code>.
     */
    @Override
    public Long getControlProcessingTime() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.idle_time</code>.
     */
    @Override
    public void setIdleTime(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.idle_time</code>.
     */
    @Override
    public Long getIdleTime() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.num_workers</code>.
     */
    @Override
    public void setNumWorkers(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.num_workers</code>.
     */
    @Override
    public Integer getNumWorkers() {
        return (Integer) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Timestamp> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Timestamp, Long, Long, Short, Long, Long, Long, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, Timestamp, Long, Long, Short, Long, Long, Long, Integer> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS.OPERATOR_EXECUTION_ID;
    }

    @Override
    public Field<Timestamp> field2() {
        return OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS.TIME;
    }

    @Override
    public Field<Long> field3() {
        return OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS.INPUT_TUPLE_CNT;
    }

    @Override
    public Field<Long> field4() {
        return OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS.OUTPUT_TUPLE_CNT;
    }

    @Override
    public Field<Short> field5() {
        return OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS.STATUS;
    }

    @Override
    public Field<Long> field6() {
        return OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS.DATA_PROCESSING_TIME;
    }

    @Override
    public Field<Long> field7() {
        return OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS.CONTROL_PROCESSING_TIME;
    }

    @Override
    public Field<Long> field8() {
        return OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS.IDLE_TIME;
    }

    @Override
    public Field<Integer> field9() {
        return OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS.NUM_WORKERS;
    }

    @Override
    public Long component1() {
        return getOperatorExecutionId();
    }

    @Override
    public Timestamp component2() {
        return getTime();
    }

    @Override
    public Long component3() {
        return getInputTupleCnt();
    }

    @Override
    public Long component4() {
        return getOutputTupleCnt();
    }

    @Override
    public Short component5() {
        return getStatus();
    }

    @Override
    public Long component6() {
        return getDataProcessingTime();
    }

    @Override
    public Long component7() {
        return getControlProcessingTime();
    }

    @Override
    public Long component8() {
        return getIdleTime();
    }

    @Override
    public Integer component9() {
        return getNumWorkers();
    }

    @Override
    public Long value1() {
        return getOperatorExecutionId();
    }

    @Override
    public Timestamp value2() {
        return getTime();
    }

    @Override
    public Long value3() {
        return getInputTupleCnt();
    }

    @Override
    public Long value4() {
        return getOutputTupleCnt();
    }

    @Override
    public Short value5() {
        return getStatus();
    }

    @Override
    public Long value6() {
        return getDataProcessingTime();
    }

    @Override
    public Long value7() {
        return getControlProcessingTime();
    }

    @Override
    public Long value8() {
        return getIdleTime();
    }

    @Override
    public Integer value9() {
        return getNumWorkers();
    }

    @Override
    public OperatorRuntimeStatisticsRecord value1(Long value) {
        setOperatorExecutionId(value);
        return this;
    }

    @Override
    public OperatorRuntimeStatisticsRecord value2(Timestamp value) {
        setTime(value);
        return this;
    }

    @Override
    public OperatorRuntimeStatisticsRecord value3(Long value) {
        setInputTupleCnt(value);
        return this;
    }

    @Override
    public OperatorRuntimeStatisticsRecord value4(Long value) {
        setOutputTupleCnt(value);
        return this;
    }

    @Override
    public OperatorRuntimeStatisticsRecord value5(Short value) {
        setStatus(value);
        return this;
    }

    @Override
    public OperatorRuntimeStatisticsRecord value6(Long value) {
        setDataProcessingTime(value);
        return this;
    }

    @Override
    public OperatorRuntimeStatisticsRecord value7(Long value) {
        setControlProcessingTime(value);
        return this;
    }

    @Override
    public OperatorRuntimeStatisticsRecord value8(Long value) {
        setIdleTime(value);
        return this;
    }

    @Override
    public OperatorRuntimeStatisticsRecord value9(Integer value) {
        setNumWorkers(value);
        return this;
    }

    @Override
    public OperatorRuntimeStatisticsRecord values(Long value1, Timestamp value2, Long value3, Long value4, Short value5, Long value6, Long value7, Long value8, Integer value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOperatorRuntimeStatistics from) {
        setOperatorExecutionId(from.getOperatorExecutionId());
        setTime(from.getTime());
        setInputTupleCnt(from.getInputTupleCnt());
        setOutputTupleCnt(from.getOutputTupleCnt());
        setStatus(from.getStatus());
        setDataProcessingTime(from.getDataProcessingTime());
        setControlProcessingTime(from.getControlProcessingTime());
        setIdleTime(from.getIdleTime());
        setNumWorkers(from.getNumWorkers());
    }

    @Override
    public <E extends IOperatorRuntimeStatistics> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OperatorRuntimeStatisticsRecord
     */
    public OperatorRuntimeStatisticsRecord() {
        super(OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS);
    }

    /**
     * Create a detached, initialised OperatorRuntimeStatisticsRecord
     */
    public OperatorRuntimeStatisticsRecord(Long operatorExecutionId, Timestamp time, Long inputTupleCnt, Long outputTupleCnt, Short status, Long dataProcessingTime, Long controlProcessingTime, Long idleTime, Integer numWorkers) {
        super(OperatorRuntimeStatistics.OPERATOR_RUNTIME_STATISTICS);

        set(0, operatorExecutionId);
        set(1, time);
        set(2, inputTupleCnt);
        set(3, outputTupleCnt);
        set(4, status);
        set(5, dataProcessingTime);
        set(6, controlProcessingTime);
        set(7, idleTime);
        set(8, numWorkers);
    }
}
