/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dao.jooq.generated.tables.pojos;


import edu.uci.ics.texera.dao.jooq.generated.tables.interfaces.IOperatorRuntimeStatistics;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OperatorRuntimeStatistics implements IOperatorRuntimeStatistics {

    private static final long serialVersionUID = 1L;

    private Long          operatorExecutionId;
    private LocalDateTime time;
    private Long          inputTupleCnt;
    private Long          outputTupleCnt;
    private Short         status;
    private Long          dataProcessingTime;
    private Long          controlProcessingTime;
    private Long          idleTime;
    private Integer       numWorkers;

    public OperatorRuntimeStatistics() {}

    public OperatorRuntimeStatistics(IOperatorRuntimeStatistics value) {
        this.operatorExecutionId = value.getOperatorExecutionId();
        this.time = value.getTime();
        this.inputTupleCnt = value.getInputTupleCnt();
        this.outputTupleCnt = value.getOutputTupleCnt();
        this.status = value.getStatus();
        this.dataProcessingTime = value.getDataProcessingTime();
        this.controlProcessingTime = value.getControlProcessingTime();
        this.idleTime = value.getIdleTime();
        this.numWorkers = value.getNumWorkers();
    }

    public OperatorRuntimeStatistics(
        Long          operatorExecutionId,
        LocalDateTime time,
        Long          inputTupleCnt,
        Long          outputTupleCnt,
        Short         status,
        Long          dataProcessingTime,
        Long          controlProcessingTime,
        Long          idleTime,
        Integer       numWorkers
    ) {
        this.operatorExecutionId = operatorExecutionId;
        this.time = time;
        this.inputTupleCnt = inputTupleCnt;
        this.outputTupleCnt = outputTupleCnt;
        this.status = status;
        this.dataProcessingTime = dataProcessingTime;
        this.controlProcessingTime = controlProcessingTime;
        this.idleTime = idleTime;
        this.numWorkers = numWorkers;
    }

    /**
     * Getter for
     * <code>texera_db.operator_runtime_statistics.operator_execution_id</code>.
     */
    @Override
    public Long getOperatorExecutionId() {
        return this.operatorExecutionId;
    }

    /**
     * Setter for
     * <code>texera_db.operator_runtime_statistics.operator_execution_id</code>.
     */
    @Override
    public void setOperatorExecutionId(Long operatorExecutionId) {
        this.operatorExecutionId = operatorExecutionId;
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.time</code>.
     */
    @Override
    public LocalDateTime getTime() {
        return this.time;
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.time</code>.
     */
    @Override
    public void setTime(LocalDateTime time) {
        this.time = time;
    }

    /**
     * Getter for
     * <code>texera_db.operator_runtime_statistics.input_tuple_cnt</code>.
     */
    @Override
    public Long getInputTupleCnt() {
        return this.inputTupleCnt;
    }

    /**
     * Setter for
     * <code>texera_db.operator_runtime_statistics.input_tuple_cnt</code>.
     */
    @Override
    public void setInputTupleCnt(Long inputTupleCnt) {
        this.inputTupleCnt = inputTupleCnt;
    }

    /**
     * Getter for
     * <code>texera_db.operator_runtime_statistics.output_tuple_cnt</code>.
     */
    @Override
    public Long getOutputTupleCnt() {
        return this.outputTupleCnt;
    }

    /**
     * Setter for
     * <code>texera_db.operator_runtime_statistics.output_tuple_cnt</code>.
     */
    @Override
    public void setOutputTupleCnt(Long outputTupleCnt) {
        this.outputTupleCnt = outputTupleCnt;
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.status</code>.
     */
    @Override
    public Short getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.status</code>.
     */
    @Override
    public void setStatus(Short status) {
        this.status = status;
    }

    /**
     * Getter for
     * <code>texera_db.operator_runtime_statistics.data_processing_time</code>.
     */
    @Override
    public Long getDataProcessingTime() {
        return this.dataProcessingTime;
    }

    /**
     * Setter for
     * <code>texera_db.operator_runtime_statistics.data_processing_time</code>.
     */
    @Override
    public void setDataProcessingTime(Long dataProcessingTime) {
        this.dataProcessingTime = dataProcessingTime;
    }

    /**
     * Getter for
     * <code>texera_db.operator_runtime_statistics.control_processing_time</code>.
     */
    @Override
    public Long getControlProcessingTime() {
        return this.controlProcessingTime;
    }

    /**
     * Setter for
     * <code>texera_db.operator_runtime_statistics.control_processing_time</code>.
     */
    @Override
    public void setControlProcessingTime(Long controlProcessingTime) {
        this.controlProcessingTime = controlProcessingTime;
    }

    /**
     * Getter for <code>texera_db.operator_runtime_statistics.idle_time</code>.
     */
    @Override
    public Long getIdleTime() {
        return this.idleTime;
    }

    /**
     * Setter for <code>texera_db.operator_runtime_statistics.idle_time</code>.
     */
    @Override
    public void setIdleTime(Long idleTime) {
        this.idleTime = idleTime;
    }

    /**
     * Getter for
     * <code>texera_db.operator_runtime_statistics.num_workers</code>.
     */
    @Override
    public Integer getNumWorkers() {
        return this.numWorkers;
    }

    /**
     * Setter for
     * <code>texera_db.operator_runtime_statistics.num_workers</code>.
     */
    @Override
    public void setNumWorkers(Integer numWorkers) {
        this.numWorkers = numWorkers;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("OperatorRuntimeStatistics (");

        sb.append(operatorExecutionId);
        sb.append(", ").append(time);
        sb.append(", ").append(inputTupleCnt);
        sb.append(", ").append(outputTupleCnt);
        sb.append(", ").append(status);
        sb.append(", ").append(dataProcessingTime);
        sb.append(", ").append(controlProcessingTime);
        sb.append(", ").append(idleTime);
        sb.append(", ").append(numWorkers);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IOperatorRuntimeStatistics from) {
        setOperatorExecutionId(from.getOperatorExecutionId());
        setTime(from.getTime());
        setInputTupleCnt(from.getInputTupleCnt());
        setOutputTupleCnt(from.getOutputTupleCnt());
        setStatus(from.getStatus());
        setDataProcessingTime(from.getDataProcessingTime());
        setControlProcessingTime(from.getControlProcessingTime());
        setIdleTime(from.getIdleTime());
        setNumWorkers(from.getNumWorkers());
    }

    @Override
    public <E extends IOperatorRuntimeStatistics> E into(E into) {
        into.from(this);
        return into;
    }
}
