// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: edu/uci/ics/amber/engine/common/ambermessage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ControlCommandV2 } from "../architecture/worker/controlcommands";
import { ControlReturnV2 } from "../architecture/worker/controlreturns";
import { ActorVirtualIdentity } from "./virtualidentity";

export const protobufPackage = "edu.uci.ics.amber.engine.common";

export interface ControlInvocationV2 {
  commandId: number;
  command: ControlCommandV2 | undefined;
}

export interface ReturnInvocationV2 {
  originalCommandId: number;
  controlReturn: ControlReturnV2 | undefined;
}

export interface ControlPayloadV2 {
  controlInvocation?: ControlInvocationV2 | undefined;
  returnInvocation?: ReturnInvocationV2 | undefined;
}

export interface PythonDataHeader {
  tag: ActorVirtualIdentity | undefined;
  isEnd: boolean;
}

export interface PythonControlMessage {
  tag: ActorVirtualIdentity | undefined;
  payload: ControlPayloadV2 | undefined;
}

function createBaseControlInvocationV2(): ControlInvocationV2 {
  return { commandId: 0, command: undefined };
}

export const ControlInvocationV2: MessageFns<ControlInvocationV2> = {
  encode(message: ControlInvocationV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commandId !== 0) {
      writer.uint32(8).int64(message.commandId);
    }
    if (message.command !== undefined) {
      ControlCommandV2.encode(message.command, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ControlInvocationV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseControlInvocationV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.commandId = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.command = ControlCommandV2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ControlInvocationV2 {
    return {
      commandId: isSet(object.commandId) ? globalThis.Number(object.commandId) : 0,
      command: isSet(object.command) ? ControlCommandV2.fromJSON(object.command) : undefined,
    };
  },

  toJSON(message: ControlInvocationV2): unknown {
    const obj: any = {};
    if (message.commandId !== 0) {
      obj.commandId = Math.round(message.commandId);
    }
    if (message.command !== undefined) {
      obj.command = ControlCommandV2.toJSON(message.command);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ControlInvocationV2>, I>>(base?: I): ControlInvocationV2 {
    return ControlInvocationV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ControlInvocationV2>, I>>(object: I): ControlInvocationV2 {
    const message = createBaseControlInvocationV2();
    message.commandId = object.commandId ?? 0;
    message.command = (object.command !== undefined && object.command !== null)
      ? ControlCommandV2.fromPartial(object.command)
      : undefined;
    return message;
  },
};

function createBaseReturnInvocationV2(): ReturnInvocationV2 {
  return { originalCommandId: 0, controlReturn: undefined };
}

export const ReturnInvocationV2: MessageFns<ReturnInvocationV2> = {
  encode(message: ReturnInvocationV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originalCommandId !== 0) {
      writer.uint32(8).int64(message.originalCommandId);
    }
    if (message.controlReturn !== undefined) {
      ControlReturnV2.encode(message.controlReturn, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReturnInvocationV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReturnInvocationV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.originalCommandId = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.controlReturn = ControlReturnV2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReturnInvocationV2 {
    return {
      originalCommandId: isSet(object.originalCommandId) ? globalThis.Number(object.originalCommandId) : 0,
      controlReturn: isSet(object.controlReturn) ? ControlReturnV2.fromJSON(object.controlReturn) : undefined,
    };
  },

  toJSON(message: ReturnInvocationV2): unknown {
    const obj: any = {};
    if (message.originalCommandId !== 0) {
      obj.originalCommandId = Math.round(message.originalCommandId);
    }
    if (message.controlReturn !== undefined) {
      obj.controlReturn = ControlReturnV2.toJSON(message.controlReturn);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReturnInvocationV2>, I>>(base?: I): ReturnInvocationV2 {
    return ReturnInvocationV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReturnInvocationV2>, I>>(object: I): ReturnInvocationV2 {
    const message = createBaseReturnInvocationV2();
    message.originalCommandId = object.originalCommandId ?? 0;
    message.controlReturn = (object.controlReturn !== undefined && object.controlReturn !== null)
      ? ControlReturnV2.fromPartial(object.controlReturn)
      : undefined;
    return message;
  },
};

function createBaseControlPayloadV2(): ControlPayloadV2 {
  return { controlInvocation: undefined, returnInvocation: undefined };
}

export const ControlPayloadV2: MessageFns<ControlPayloadV2> = {
  encode(message: ControlPayloadV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.controlInvocation !== undefined) {
      ControlInvocationV2.encode(message.controlInvocation, writer.uint32(10).fork()).join();
    }
    if (message.returnInvocation !== undefined) {
      ReturnInvocationV2.encode(message.returnInvocation, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ControlPayloadV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseControlPayloadV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.controlInvocation = ControlInvocationV2.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.returnInvocation = ReturnInvocationV2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ControlPayloadV2 {
    return {
      controlInvocation: isSet(object.controlInvocation)
        ? ControlInvocationV2.fromJSON(object.controlInvocation)
        : undefined,
      returnInvocation: isSet(object.returnInvocation)
        ? ReturnInvocationV2.fromJSON(object.returnInvocation)
        : undefined,
    };
  },

  toJSON(message: ControlPayloadV2): unknown {
    const obj: any = {};
    if (message.controlInvocation !== undefined) {
      obj.controlInvocation = ControlInvocationV2.toJSON(message.controlInvocation);
    }
    if (message.returnInvocation !== undefined) {
      obj.returnInvocation = ReturnInvocationV2.toJSON(message.returnInvocation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ControlPayloadV2>, I>>(base?: I): ControlPayloadV2 {
    return ControlPayloadV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ControlPayloadV2>, I>>(object: I): ControlPayloadV2 {
    const message = createBaseControlPayloadV2();
    message.controlInvocation = (object.controlInvocation !== undefined && object.controlInvocation !== null)
      ? ControlInvocationV2.fromPartial(object.controlInvocation)
      : undefined;
    message.returnInvocation = (object.returnInvocation !== undefined && object.returnInvocation !== null)
      ? ReturnInvocationV2.fromPartial(object.returnInvocation)
      : undefined;
    return message;
  },
};

function createBasePythonDataHeader(): PythonDataHeader {
  return { tag: undefined, isEnd: false };
}

export const PythonDataHeader: MessageFns<PythonDataHeader> = {
  encode(message: PythonDataHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== undefined) {
      ActorVirtualIdentity.encode(message.tag, writer.uint32(10).fork()).join();
    }
    if (message.isEnd !== false) {
      writer.uint32(16).bool(message.isEnd);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PythonDataHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePythonDataHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tag = ActorVirtualIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isEnd = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PythonDataHeader {
    return {
      tag: isSet(object.tag) ? ActorVirtualIdentity.fromJSON(object.tag) : undefined,
      isEnd: isSet(object.isEnd) ? globalThis.Boolean(object.isEnd) : false,
    };
  },

  toJSON(message: PythonDataHeader): unknown {
    const obj: any = {};
    if (message.tag !== undefined) {
      obj.tag = ActorVirtualIdentity.toJSON(message.tag);
    }
    if (message.isEnd !== false) {
      obj.isEnd = message.isEnd;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PythonDataHeader>, I>>(base?: I): PythonDataHeader {
    return PythonDataHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PythonDataHeader>, I>>(object: I): PythonDataHeader {
    const message = createBasePythonDataHeader();
    message.tag = (object.tag !== undefined && object.tag !== null)
      ? ActorVirtualIdentity.fromPartial(object.tag)
      : undefined;
    message.isEnd = object.isEnd ?? false;
    return message;
  },
};

function createBasePythonControlMessage(): PythonControlMessage {
  return { tag: undefined, payload: undefined };
}

export const PythonControlMessage: MessageFns<PythonControlMessage> = {
  encode(message: PythonControlMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== undefined) {
      ActorVirtualIdentity.encode(message.tag, writer.uint32(10).fork()).join();
    }
    if (message.payload !== undefined) {
      ControlPayloadV2.encode(message.payload, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PythonControlMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePythonControlMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tag = ActorVirtualIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.payload = ControlPayloadV2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PythonControlMessage {
    return {
      tag: isSet(object.tag) ? ActorVirtualIdentity.fromJSON(object.tag) : undefined,
      payload: isSet(object.payload) ? ControlPayloadV2.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: PythonControlMessage): unknown {
    const obj: any = {};
    if (message.tag !== undefined) {
      obj.tag = ActorVirtualIdentity.toJSON(message.tag);
    }
    if (message.payload !== undefined) {
      obj.payload = ControlPayloadV2.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PythonControlMessage>, I>>(base?: I): PythonControlMessage {
    return PythonControlMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PythonControlMessage>, I>>(object: I): PythonControlMessage {
    const message = createBasePythonControlMessage();
    message.tag = (object.tag !== undefined && object.tag !== null)
      ? ActorVirtualIdentity.fromPartial(object.tag)
      : undefined;
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? ControlPayloadV2.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
