// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.0
// source: edu/uci/ics/amber/engine/architecture/worker/controlcommands.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../../../google/protobuf/timestamp";
import { ChannelIdentity } from "../../common/virtualidentity";
import { PhysicalLink, PortIdentity } from "../../common/workflow";
import { Partitioning } from "../sendsemantics/partitionings";

export const protobufPackage = "edu.uci.ics.amber.engine.architecture.worker";

export enum ConsoleMessageType {
  PRINT = 0,
  ERROR = 1,
  COMMAND = 2,
  DEBUGGER = 3,
  UNRECOGNIZED = -1,
}

export function consoleMessageTypeFromJSON(object: any): ConsoleMessageType {
  switch (object) {
    case 0:
    case "PRINT":
      return ConsoleMessageType.PRINT;
    case 1:
    case "ERROR":
      return ConsoleMessageType.ERROR;
    case 2:
    case "COMMAND":
      return ConsoleMessageType.COMMAND;
    case 3:
    case "DEBUGGER":
      return ConsoleMessageType.DEBUGGER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConsoleMessageType.UNRECOGNIZED;
  }
}

export function consoleMessageTypeToJSON(object: ConsoleMessageType): string {
  switch (object) {
    case ConsoleMessageType.PRINT:
      return "PRINT";
    case ConsoleMessageType.ERROR:
      return "ERROR";
    case ConsoleMessageType.COMMAND:
      return "COMMAND";
    case ConsoleMessageType.DEBUGGER:
      return "DEBUGGER";
    case ConsoleMessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NoOpV2 {}

export interface StartWorkerV2 {}

export interface PauseWorkerV2 {}

export interface ResumeWorkerV2 {}

export interface SchedulerTimeSlotEventV2 {
  timeSlotExpired: boolean;
}

export interface OpenExecutorV2 {}

export interface AssignPortV2 {
  portId: PortIdentity | undefined;
  input: boolean;
  schema: { [key: string]: string };
}

export interface AssignPortV2_SchemaEntry {
  key: string;
  value: string;
}

export interface AddInputChannelV2 {
  channelId: ChannelIdentity | undefined;
  portId: PortIdentity | undefined;
}

export interface AddPartitioningV2 {
  tag: PhysicalLink | undefined;
  partitioning: Partitioning | undefined;
}

export interface WorkerExecutionCompletedV2 {}

export interface QueryStatisticsV2 {}

export interface QueryCurrentInputTupleV2 {}

export interface LinkOrdinal {
  link: PhysicalLink | undefined;
  portOrdinal: number;
}

export interface InitializeExecutorV2 {
  code: string;
  language: string;
  isSource: boolean;
}

export interface UpdateExecutorV2 {
  code: string;
  isSource: boolean;
}

export interface ReplayCurrentTupleV2 {}

export interface ConsoleMessage {
  workerId: string;
  timestamp: Date | undefined;
  msgType: ConsoleMessageType;
  source: string;
  title: string;
  message: string;
}

export interface PythonConsoleMessageV2 {
  message: ConsoleMessage | undefined;
}

export interface EvaluateExpressionV2 {
  expression: string;
}

export interface WorkerDebugCommandV2 {
  cmd: string;
}

export interface PortCompletedV2 {
  portId: PortIdentity | undefined;
  input: boolean;
}

export interface ControlCommandV2 {
  startWorker?: StartWorkerV2 | undefined;
  pauseWorker?: PauseWorkerV2 | undefined;
  resumeWorker?: ResumeWorkerV2 | undefined;
  assignPort?: AssignPortV2 | undefined;
  addPartitioning?: AddPartitioningV2 | undefined;
  addInputChannel?: AddInputChannelV2 | undefined;
  queryStatistics?: QueryStatisticsV2 | undefined;
  queryCurrentInputTuple?: QueryCurrentInputTupleV2 | undefined;
  openExecutor?: OpenExecutorV2 | undefined;
  portCompleted?: PortCompletedV2 | undefined;
  schedulerTimeSlotEvent?: SchedulerTimeSlotEventV2 | undefined;
  initializeExecutor?: InitializeExecutorV2 | undefined;
  updateExecutor?: UpdateExecutorV2 | undefined;
  pythonConsoleMessage?: PythonConsoleMessageV2 | undefined;
  replayCurrentTuple?: ReplayCurrentTupleV2 | undefined;
  evaluateExpression?: EvaluateExpressionV2 | undefined;
  workerDebugCommand?: WorkerDebugCommandV2 | undefined;
  workerExecutionCompleted?: WorkerExecutionCompletedV2 | undefined;
  noOp?: NoOpV2 | undefined;
}

function createBaseNoOpV2(): NoOpV2 {
  return {};
}

export const NoOpV2: MessageFns<NoOpV2> = {
  encode(_: NoOpV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoOpV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoOpV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NoOpV2 {
    return {};
  },

  toJSON(_: NoOpV2): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NoOpV2>, I>>(base?: I): NoOpV2 {
    return NoOpV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoOpV2>, I>>(_: I): NoOpV2 {
    const message = createBaseNoOpV2();
    return message;
  },
};

function createBaseStartWorkerV2(): StartWorkerV2 {
  return {};
}

export const StartWorkerV2: MessageFns<StartWorkerV2> = {
  encode(_: StartWorkerV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartWorkerV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartWorkerV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StartWorkerV2 {
    return {};
  },

  toJSON(_: StartWorkerV2): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StartWorkerV2>, I>>(base?: I): StartWorkerV2 {
    return StartWorkerV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartWorkerV2>, I>>(_: I): StartWorkerV2 {
    const message = createBaseStartWorkerV2();
    return message;
  },
};

function createBasePauseWorkerV2(): PauseWorkerV2 {
  return {};
}

export const PauseWorkerV2: MessageFns<PauseWorkerV2> = {
  encode(_: PauseWorkerV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PauseWorkerV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePauseWorkerV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PauseWorkerV2 {
    return {};
  },

  toJSON(_: PauseWorkerV2): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PauseWorkerV2>, I>>(base?: I): PauseWorkerV2 {
    return PauseWorkerV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PauseWorkerV2>, I>>(_: I): PauseWorkerV2 {
    const message = createBasePauseWorkerV2();
    return message;
  },
};

function createBaseResumeWorkerV2(): ResumeWorkerV2 {
  return {};
}

export const ResumeWorkerV2: MessageFns<ResumeWorkerV2> = {
  encode(_: ResumeWorkerV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResumeWorkerV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResumeWorkerV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ResumeWorkerV2 {
    return {};
  },

  toJSON(_: ResumeWorkerV2): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ResumeWorkerV2>, I>>(base?: I): ResumeWorkerV2 {
    return ResumeWorkerV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResumeWorkerV2>, I>>(_: I): ResumeWorkerV2 {
    const message = createBaseResumeWorkerV2();
    return message;
  },
};

function createBaseSchedulerTimeSlotEventV2(): SchedulerTimeSlotEventV2 {
  return { timeSlotExpired: false };
}

export const SchedulerTimeSlotEventV2: MessageFns<SchedulerTimeSlotEventV2> = {
  encode(message: SchedulerTimeSlotEventV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timeSlotExpired !== false) {
      writer.uint32(8).bool(message.timeSlotExpired);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchedulerTimeSlotEventV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchedulerTimeSlotEventV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.timeSlotExpired = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchedulerTimeSlotEventV2 {
    return { timeSlotExpired: isSet(object.timeSlotExpired) ? globalThis.Boolean(object.timeSlotExpired) : false };
  },

  toJSON(message: SchedulerTimeSlotEventV2): unknown {
    const obj: any = {};
    if (message.timeSlotExpired !== false) {
      obj.timeSlotExpired = message.timeSlotExpired;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SchedulerTimeSlotEventV2>, I>>(base?: I): SchedulerTimeSlotEventV2 {
    return SchedulerTimeSlotEventV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SchedulerTimeSlotEventV2>, I>>(object: I): SchedulerTimeSlotEventV2 {
    const message = createBaseSchedulerTimeSlotEventV2();
    message.timeSlotExpired = object.timeSlotExpired ?? false;
    return message;
  },
};

function createBaseOpenExecutorV2(): OpenExecutorV2 {
  return {};
}

export const OpenExecutorV2: MessageFns<OpenExecutorV2> = {
  encode(_: OpenExecutorV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenExecutorV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenExecutorV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OpenExecutorV2 {
    return {};
  },

  toJSON(_: OpenExecutorV2): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenExecutorV2>, I>>(base?: I): OpenExecutorV2 {
    return OpenExecutorV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenExecutorV2>, I>>(_: I): OpenExecutorV2 {
    const message = createBaseOpenExecutorV2();
    return message;
  },
};

function createBaseAssignPortV2(): AssignPortV2 {
  return { portId: undefined, input: false, schema: {} };
}

export const AssignPortV2: MessageFns<AssignPortV2> = {
  encode(message: AssignPortV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.portId !== undefined) {
      PortIdentity.encode(message.portId, writer.uint32(10).fork()).join();
    }
    if (message.input !== false) {
      writer.uint32(16).bool(message.input);
    }
    Object.entries(message.schema).forEach(([key, value]) => {
      AssignPortV2_SchemaEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssignPortV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssignPortV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.portId = PortIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.input = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = AssignPortV2_SchemaEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.schema[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssignPortV2 {
    return {
      portId: isSet(object.portId) ? PortIdentity.fromJSON(object.portId) : undefined,
      input: isSet(object.input) ? globalThis.Boolean(object.input) : false,
      schema: isObject(object.schema)
        ? Object.entries(object.schema).reduce<{ [key: string]: string }>((acc, [key, value]) => {
            acc[key] = String(value);
            return acc;
          }, {})
        : {},
    };
  },

  toJSON(message: AssignPortV2): unknown {
    const obj: any = {};
    if (message.portId !== undefined) {
      obj.portId = PortIdentity.toJSON(message.portId);
    }
    if (message.input !== false) {
      obj.input = message.input;
    }
    if (message.schema) {
      const entries = Object.entries(message.schema);
      if (entries.length > 0) {
        obj.schema = {};
        entries.forEach(([k, v]) => {
          obj.schema[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssignPortV2>, I>>(base?: I): AssignPortV2 {
    return AssignPortV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssignPortV2>, I>>(object: I): AssignPortV2 {
    const message = createBaseAssignPortV2();
    message.portId =
      object.portId !== undefined && object.portId !== null ? PortIdentity.fromPartial(object.portId) : undefined;
    message.input = object.input ?? false;
    message.schema = Object.entries(object.schema ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseAssignPortV2_SchemaEntry(): AssignPortV2_SchemaEntry {
  return { key: "", value: "" };
}

export const AssignPortV2_SchemaEntry: MessageFns<AssignPortV2_SchemaEntry> = {
  encode(message: AssignPortV2_SchemaEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssignPortV2_SchemaEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssignPortV2_SchemaEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssignPortV2_SchemaEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AssignPortV2_SchemaEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssignPortV2_SchemaEntry>, I>>(base?: I): AssignPortV2_SchemaEntry {
    return AssignPortV2_SchemaEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssignPortV2_SchemaEntry>, I>>(object: I): AssignPortV2_SchemaEntry {
    const message = createBaseAssignPortV2_SchemaEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAddInputChannelV2(): AddInputChannelV2 {
  return { channelId: undefined, portId: undefined };
}

export const AddInputChannelV2: MessageFns<AddInputChannelV2> = {
  encode(message: AddInputChannelV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.channelId !== undefined) {
      ChannelIdentity.encode(message.channelId, writer.uint32(10).fork()).join();
    }
    if (message.portId !== undefined) {
      PortIdentity.encode(message.portId, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddInputChannelV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddInputChannelV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channelId = ChannelIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.portId = PortIdentity.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddInputChannelV2 {
    return {
      channelId: isSet(object.channelId) ? ChannelIdentity.fromJSON(object.channelId) : undefined,
      portId: isSet(object.portId) ? PortIdentity.fromJSON(object.portId) : undefined,
    };
  },

  toJSON(message: AddInputChannelV2): unknown {
    const obj: any = {};
    if (message.channelId !== undefined) {
      obj.channelId = ChannelIdentity.toJSON(message.channelId);
    }
    if (message.portId !== undefined) {
      obj.portId = PortIdentity.toJSON(message.portId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddInputChannelV2>, I>>(base?: I): AddInputChannelV2 {
    return AddInputChannelV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddInputChannelV2>, I>>(object: I): AddInputChannelV2 {
    const message = createBaseAddInputChannelV2();
    message.channelId =
      object.channelId !== undefined && object.channelId !== null
        ? ChannelIdentity.fromPartial(object.channelId)
        : undefined;
    message.portId =
      object.portId !== undefined && object.portId !== null ? PortIdentity.fromPartial(object.portId) : undefined;
    return message;
  },
};

function createBaseAddPartitioningV2(): AddPartitioningV2 {
  return { tag: undefined, partitioning: undefined };
}

export const AddPartitioningV2: MessageFns<AddPartitioningV2> = {
  encode(message: AddPartitioningV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== undefined) {
      PhysicalLink.encode(message.tag, writer.uint32(10).fork()).join();
    }
    if (message.partitioning !== undefined) {
      Partitioning.encode(message.partitioning, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddPartitioningV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPartitioningV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tag = PhysicalLink.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.partitioning = Partitioning.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddPartitioningV2 {
    return {
      tag: isSet(object.tag) ? PhysicalLink.fromJSON(object.tag) : undefined,
      partitioning: isSet(object.partitioning) ? Partitioning.fromJSON(object.partitioning) : undefined,
    };
  },

  toJSON(message: AddPartitioningV2): unknown {
    const obj: any = {};
    if (message.tag !== undefined) {
      obj.tag = PhysicalLink.toJSON(message.tag);
    }
    if (message.partitioning !== undefined) {
      obj.partitioning = Partitioning.toJSON(message.partitioning);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddPartitioningV2>, I>>(base?: I): AddPartitioningV2 {
    return AddPartitioningV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddPartitioningV2>, I>>(object: I): AddPartitioningV2 {
    const message = createBaseAddPartitioningV2();
    message.tag = object.tag !== undefined && object.tag !== null ? PhysicalLink.fromPartial(object.tag) : undefined;
    message.partitioning =
      object.partitioning !== undefined && object.partitioning !== null
        ? Partitioning.fromPartial(object.partitioning)
        : undefined;
    return message;
  },
};

function createBaseWorkerExecutionCompletedV2(): WorkerExecutionCompletedV2 {
  return {};
}

export const WorkerExecutionCompletedV2: MessageFns<WorkerExecutionCompletedV2> = {
  encode(_: WorkerExecutionCompletedV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerExecutionCompletedV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerExecutionCompletedV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): WorkerExecutionCompletedV2 {
    return {};
  },

  toJSON(_: WorkerExecutionCompletedV2): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerExecutionCompletedV2>, I>>(base?: I): WorkerExecutionCompletedV2 {
    return WorkerExecutionCompletedV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerExecutionCompletedV2>, I>>(_: I): WorkerExecutionCompletedV2 {
    const message = createBaseWorkerExecutionCompletedV2();
    return message;
  },
};

function createBaseQueryStatisticsV2(): QueryStatisticsV2 {
  return {};
}

export const QueryStatisticsV2: MessageFns<QueryStatisticsV2> = {
  encode(_: QueryStatisticsV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStatisticsV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStatisticsV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryStatisticsV2 {
    return {};
  },

  toJSON(_: QueryStatisticsV2): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryStatisticsV2>, I>>(base?: I): QueryStatisticsV2 {
    return QueryStatisticsV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryStatisticsV2>, I>>(_: I): QueryStatisticsV2 {
    const message = createBaseQueryStatisticsV2();
    return message;
  },
};

function createBaseQueryCurrentInputTupleV2(): QueryCurrentInputTupleV2 {
  return {};
}

export const QueryCurrentInputTupleV2: MessageFns<QueryCurrentInputTupleV2> = {
  encode(_: QueryCurrentInputTupleV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryCurrentInputTupleV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryCurrentInputTupleV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryCurrentInputTupleV2 {
    return {};
  },

  toJSON(_: QueryCurrentInputTupleV2): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryCurrentInputTupleV2>, I>>(base?: I): QueryCurrentInputTupleV2 {
    return QueryCurrentInputTupleV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryCurrentInputTupleV2>, I>>(_: I): QueryCurrentInputTupleV2 {
    const message = createBaseQueryCurrentInputTupleV2();
    return message;
  },
};

function createBaseLinkOrdinal(): LinkOrdinal {
  return { link: undefined, portOrdinal: 0 };
}

export const LinkOrdinal: MessageFns<LinkOrdinal> = {
  encode(message: LinkOrdinal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.link !== undefined) {
      PhysicalLink.encode(message.link, writer.uint32(10).fork()).join();
    }
    if (message.portOrdinal !== 0) {
      writer.uint32(16).int64(message.portOrdinal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkOrdinal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkOrdinal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.link = PhysicalLink.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.portOrdinal = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkOrdinal {
    return {
      link: isSet(object.link) ? PhysicalLink.fromJSON(object.link) : undefined,
      portOrdinal: isSet(object.portOrdinal) ? globalThis.Number(object.portOrdinal) : 0,
    };
  },

  toJSON(message: LinkOrdinal): unknown {
    const obj: any = {};
    if (message.link !== undefined) {
      obj.link = PhysicalLink.toJSON(message.link);
    }
    if (message.portOrdinal !== 0) {
      obj.portOrdinal = Math.round(message.portOrdinal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LinkOrdinal>, I>>(base?: I): LinkOrdinal {
    return LinkOrdinal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LinkOrdinal>, I>>(object: I): LinkOrdinal {
    const message = createBaseLinkOrdinal();
    message.link =
      object.link !== undefined && object.link !== null ? PhysicalLink.fromPartial(object.link) : undefined;
    message.portOrdinal = object.portOrdinal ?? 0;
    return message;
  },
};

function createBaseInitializeExecutorV2(): InitializeExecutorV2 {
  return { code: "", language: "", isSource: false };
}

export const InitializeExecutorV2: MessageFns<InitializeExecutorV2> = {
  encode(message: InitializeExecutorV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.language !== "") {
      writer.uint32(18).string(message.language);
    }
    if (message.isSource !== false) {
      writer.uint32(24).bool(message.isSource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitializeExecutorV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitializeExecutorV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.language = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isSource = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitializeExecutorV2 {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      isSource: isSet(object.isSource) ? globalThis.Boolean(object.isSource) : false,
    };
  },

  toJSON(message: InitializeExecutorV2): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.isSource !== false) {
      obj.isSource = message.isSource;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitializeExecutorV2>, I>>(base?: I): InitializeExecutorV2 {
    return InitializeExecutorV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitializeExecutorV2>, I>>(object: I): InitializeExecutorV2 {
    const message = createBaseInitializeExecutorV2();
    message.code = object.code ?? "";
    message.language = object.language ?? "";
    message.isSource = object.isSource ?? false;
    return message;
  },
};

function createBaseUpdateExecutorV2(): UpdateExecutorV2 {
  return { code: "", isSource: false };
}

export const UpdateExecutorV2: MessageFns<UpdateExecutorV2> = {
  encode(message: UpdateExecutorV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.isSource !== false) {
      writer.uint32(16).bool(message.isSource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateExecutorV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateExecutorV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isSource = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateExecutorV2 {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      isSource: isSet(object.isSource) ? globalThis.Boolean(object.isSource) : false,
    };
  },

  toJSON(message: UpdateExecutorV2): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.isSource !== false) {
      obj.isSource = message.isSource;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateExecutorV2>, I>>(base?: I): UpdateExecutorV2 {
    return UpdateExecutorV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateExecutorV2>, I>>(object: I): UpdateExecutorV2 {
    const message = createBaseUpdateExecutorV2();
    message.code = object.code ?? "";
    message.isSource = object.isSource ?? false;
    return message;
  },
};

function createBaseReplayCurrentTupleV2(): ReplayCurrentTupleV2 {
  return {};
}

export const ReplayCurrentTupleV2: MessageFns<ReplayCurrentTupleV2> = {
  encode(_: ReplayCurrentTupleV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplayCurrentTupleV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplayCurrentTupleV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReplayCurrentTupleV2 {
    return {};
  },

  toJSON(_: ReplayCurrentTupleV2): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ReplayCurrentTupleV2>, I>>(base?: I): ReplayCurrentTupleV2 {
    return ReplayCurrentTupleV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReplayCurrentTupleV2>, I>>(_: I): ReplayCurrentTupleV2 {
    const message = createBaseReplayCurrentTupleV2();
    return message;
  },
};

function createBaseConsoleMessage(): ConsoleMessage {
  return { workerId: "", timestamp: undefined, msgType: 0, source: "", title: "", message: "" };
}

export const ConsoleMessage: MessageFns<ConsoleMessage> = {
  encode(message: ConsoleMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workerId !== "") {
      writer.uint32(10).string(message.workerId);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).join();
    }
    if (message.msgType !== 0) {
      writer.uint32(24).int32(message.msgType);
    }
    if (message.source !== "") {
      writer.uint32(34).string(message.source);
    }
    if (message.title !== "") {
      writer.uint32(42).string(message.title);
    }
    if (message.message !== "") {
      writer.uint32(50).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsoleMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsoleMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.workerId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.msgType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.source = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.title = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsoleMessage {
    return {
      workerId: isSet(object.workerId) ? globalThis.String(object.workerId) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      msgType: isSet(object.msgType) ? consoleMessageTypeFromJSON(object.msgType) : 0,
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ConsoleMessage): unknown {
    const obj: any = {};
    if (message.workerId !== "") {
      obj.workerId = message.workerId;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.msgType !== 0) {
      obj.msgType = consoleMessageTypeToJSON(message.msgType);
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsoleMessage>, I>>(base?: I): ConsoleMessage {
    return ConsoleMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsoleMessage>, I>>(object: I): ConsoleMessage {
    const message = createBaseConsoleMessage();
    message.workerId = object.workerId ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.msgType = object.msgType ?? 0;
    message.source = object.source ?? "";
    message.title = object.title ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBasePythonConsoleMessageV2(): PythonConsoleMessageV2 {
  return { message: undefined };
}

export const PythonConsoleMessageV2: MessageFns<PythonConsoleMessageV2> = {
  encode(message: PythonConsoleMessageV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      ConsoleMessage.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PythonConsoleMessageV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePythonConsoleMessageV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = ConsoleMessage.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PythonConsoleMessageV2 {
    return { message: isSet(object.message) ? ConsoleMessage.fromJSON(object.message) : undefined };
  },

  toJSON(message: PythonConsoleMessageV2): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = ConsoleMessage.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PythonConsoleMessageV2>, I>>(base?: I): PythonConsoleMessageV2 {
    return PythonConsoleMessageV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PythonConsoleMessageV2>, I>>(object: I): PythonConsoleMessageV2 {
    const message = createBasePythonConsoleMessageV2();
    message.message =
      object.message !== undefined && object.message !== null ? ConsoleMessage.fromPartial(object.message) : undefined;
    return message;
  },
};

function createBaseEvaluateExpressionV2(): EvaluateExpressionV2 {
  return { expression: "" };
}

export const EvaluateExpressionV2: MessageFns<EvaluateExpressionV2> = {
  encode(message: EvaluateExpressionV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expression !== "") {
      writer.uint32(10).string(message.expression);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EvaluateExpressionV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvaluateExpressionV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.expression = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EvaluateExpressionV2 {
    return { expression: isSet(object.expression) ? globalThis.String(object.expression) : "" };
  },

  toJSON(message: EvaluateExpressionV2): unknown {
    const obj: any = {};
    if (message.expression !== "") {
      obj.expression = message.expression;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EvaluateExpressionV2>, I>>(base?: I): EvaluateExpressionV2 {
    return EvaluateExpressionV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EvaluateExpressionV2>, I>>(object: I): EvaluateExpressionV2 {
    const message = createBaseEvaluateExpressionV2();
    message.expression = object.expression ?? "";
    return message;
  },
};

function createBaseWorkerDebugCommandV2(): WorkerDebugCommandV2 {
  return { cmd: "" };
}

export const WorkerDebugCommandV2: MessageFns<WorkerDebugCommandV2> = {
  encode(message: WorkerDebugCommandV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cmd !== "") {
      writer.uint32(10).string(message.cmd);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerDebugCommandV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerDebugCommandV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cmd = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerDebugCommandV2 {
    return { cmd: isSet(object.cmd) ? globalThis.String(object.cmd) : "" };
  },

  toJSON(message: WorkerDebugCommandV2): unknown {
    const obj: any = {};
    if (message.cmd !== "") {
      obj.cmd = message.cmd;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WorkerDebugCommandV2>, I>>(base?: I): WorkerDebugCommandV2 {
    return WorkerDebugCommandV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkerDebugCommandV2>, I>>(object: I): WorkerDebugCommandV2 {
    const message = createBaseWorkerDebugCommandV2();
    message.cmd = object.cmd ?? "";
    return message;
  },
};

function createBasePortCompletedV2(): PortCompletedV2 {
  return { portId: undefined, input: false };
}

export const PortCompletedV2: MessageFns<PortCompletedV2> = {
  encode(message: PortCompletedV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.portId !== undefined) {
      PortIdentity.encode(message.portId, writer.uint32(10).fork()).join();
    }
    if (message.input !== false) {
      writer.uint32(16).bool(message.input);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PortCompletedV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePortCompletedV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.portId = PortIdentity.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.input = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PortCompletedV2 {
    return {
      portId: isSet(object.portId) ? PortIdentity.fromJSON(object.portId) : undefined,
      input: isSet(object.input) ? globalThis.Boolean(object.input) : false,
    };
  },

  toJSON(message: PortCompletedV2): unknown {
    const obj: any = {};
    if (message.portId !== undefined) {
      obj.portId = PortIdentity.toJSON(message.portId);
    }
    if (message.input !== false) {
      obj.input = message.input;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PortCompletedV2>, I>>(base?: I): PortCompletedV2 {
    return PortCompletedV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PortCompletedV2>, I>>(object: I): PortCompletedV2 {
    const message = createBasePortCompletedV2();
    message.portId =
      object.portId !== undefined && object.portId !== null ? PortIdentity.fromPartial(object.portId) : undefined;
    message.input = object.input ?? false;
    return message;
  },
};

function createBaseControlCommandV2(): ControlCommandV2 {
  return {
    startWorker: undefined,
    pauseWorker: undefined,
    resumeWorker: undefined,
    assignPort: undefined,
    addPartitioning: undefined,
    addInputChannel: undefined,
    queryStatistics: undefined,
    queryCurrentInputTuple: undefined,
    openExecutor: undefined,
    portCompleted: undefined,
    schedulerTimeSlotEvent: undefined,
    initializeExecutor: undefined,
    updateExecutor: undefined,
    pythonConsoleMessage: undefined,
    replayCurrentTuple: undefined,
    evaluateExpression: undefined,
    workerDebugCommand: undefined,
    workerExecutionCompleted: undefined,
    noOp: undefined,
  };
}

export const ControlCommandV2: MessageFns<ControlCommandV2> = {
  encode(message: ControlCommandV2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startWorker !== undefined) {
      StartWorkerV2.encode(message.startWorker, writer.uint32(10).fork()).join();
    }
    if (message.pauseWorker !== undefined) {
      PauseWorkerV2.encode(message.pauseWorker, writer.uint32(18).fork()).join();
    }
    if (message.resumeWorker !== undefined) {
      ResumeWorkerV2.encode(message.resumeWorker, writer.uint32(26).fork()).join();
    }
    if (message.assignPort !== undefined) {
      AssignPortV2.encode(message.assignPort, writer.uint32(34).fork()).join();
    }
    if (message.addPartitioning !== undefined) {
      AddPartitioningV2.encode(message.addPartitioning, writer.uint32(42).fork()).join();
    }
    if (message.addInputChannel !== undefined) {
      AddInputChannelV2.encode(message.addInputChannel, writer.uint32(50).fork()).join();
    }
    if (message.queryStatistics !== undefined) {
      QueryStatisticsV2.encode(message.queryStatistics, writer.uint32(58).fork()).join();
    }
    if (message.queryCurrentInputTuple !== undefined) {
      QueryCurrentInputTupleV2.encode(message.queryCurrentInputTuple, writer.uint32(66).fork()).join();
    }
    if (message.openExecutor !== undefined) {
      OpenExecutorV2.encode(message.openExecutor, writer.uint32(74).fork()).join();
    }
    if (message.portCompleted !== undefined) {
      PortCompletedV2.encode(message.portCompleted, writer.uint32(82).fork()).join();
    }
    if (message.schedulerTimeSlotEvent !== undefined) {
      SchedulerTimeSlotEventV2.encode(message.schedulerTimeSlotEvent, writer.uint32(90).fork()).join();
    }
    if (message.initializeExecutor !== undefined) {
      InitializeExecutorV2.encode(message.initializeExecutor, writer.uint32(170).fork()).join();
    }
    if (message.updateExecutor !== undefined) {
      UpdateExecutorV2.encode(message.updateExecutor, writer.uint32(178).fork()).join();
    }
    if (message.pythonConsoleMessage !== undefined) {
      PythonConsoleMessageV2.encode(message.pythonConsoleMessage, writer.uint32(186).fork()).join();
    }
    if (message.replayCurrentTuple !== undefined) {
      ReplayCurrentTupleV2.encode(message.replayCurrentTuple, writer.uint32(194).fork()).join();
    }
    if (message.evaluateExpression !== undefined) {
      EvaluateExpressionV2.encode(message.evaluateExpression, writer.uint32(202).fork()).join();
    }
    if (message.workerDebugCommand !== undefined) {
      WorkerDebugCommandV2.encode(message.workerDebugCommand, writer.uint32(650).fork()).join();
    }
    if (message.workerExecutionCompleted !== undefined) {
      WorkerExecutionCompletedV2.encode(message.workerExecutionCompleted, writer.uint32(810).fork()).join();
    }
    if (message.noOp !== undefined) {
      NoOpV2.encode(message.noOp, writer.uint32(79994).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ControlCommandV2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseControlCommandV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.startWorker = StartWorkerV2.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pauseWorker = PauseWorkerV2.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.resumeWorker = ResumeWorkerV2.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.assignPort = AssignPortV2.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.addPartitioning = AddPartitioningV2.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.addInputChannel = AddInputChannelV2.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.queryStatistics = QueryStatisticsV2.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.queryCurrentInputTuple = QueryCurrentInputTupleV2.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.openExecutor = OpenExecutorV2.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.portCompleted = PortCompletedV2.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.schedulerTimeSlotEvent = SchedulerTimeSlotEventV2.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.initializeExecutor = InitializeExecutorV2.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.updateExecutor = UpdateExecutorV2.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.pythonConsoleMessage = PythonConsoleMessageV2.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.replayCurrentTuple = ReplayCurrentTupleV2.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.evaluateExpression = EvaluateExpressionV2.decode(reader, reader.uint32());
          continue;
        case 81:
          if (tag !== 650) {
            break;
          }

          message.workerDebugCommand = WorkerDebugCommandV2.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag !== 810) {
            break;
          }

          message.workerExecutionCompleted = WorkerExecutionCompletedV2.decode(reader, reader.uint32());
          continue;
        case 9999:
          if (tag !== 79994) {
            break;
          }

          message.noOp = NoOpV2.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ControlCommandV2 {
    return {
      startWorker: isSet(object.startWorker) ? StartWorkerV2.fromJSON(object.startWorker) : undefined,
      pauseWorker: isSet(object.pauseWorker) ? PauseWorkerV2.fromJSON(object.pauseWorker) : undefined,
      resumeWorker: isSet(object.resumeWorker) ? ResumeWorkerV2.fromJSON(object.resumeWorker) : undefined,
      assignPort: isSet(object.assignPort) ? AssignPortV2.fromJSON(object.assignPort) : undefined,
      addPartitioning: isSet(object.addPartitioning) ? AddPartitioningV2.fromJSON(object.addPartitioning) : undefined,
      addInputChannel: isSet(object.addInputChannel) ? AddInputChannelV2.fromJSON(object.addInputChannel) : undefined,
      queryStatistics: isSet(object.queryStatistics) ? QueryStatisticsV2.fromJSON(object.queryStatistics) : undefined,
      queryCurrentInputTuple: isSet(object.queryCurrentInputTuple)
        ? QueryCurrentInputTupleV2.fromJSON(object.queryCurrentInputTuple)
        : undefined,
      openExecutor: isSet(object.openExecutor) ? OpenExecutorV2.fromJSON(object.openExecutor) : undefined,
      portCompleted: isSet(object.portCompleted) ? PortCompletedV2.fromJSON(object.portCompleted) : undefined,
      schedulerTimeSlotEvent: isSet(object.schedulerTimeSlotEvent)
        ? SchedulerTimeSlotEventV2.fromJSON(object.schedulerTimeSlotEvent)
        : undefined,
      initializeExecutor: isSet(object.initializeExecutor)
        ? InitializeExecutorV2.fromJSON(object.initializeExecutor)
        : undefined,
      updateExecutor: isSet(object.updateExecutor) ? UpdateExecutorV2.fromJSON(object.updateExecutor) : undefined,
      pythonConsoleMessage: isSet(object.pythonConsoleMessage)
        ? PythonConsoleMessageV2.fromJSON(object.pythonConsoleMessage)
        : undefined,
      replayCurrentTuple: isSet(object.replayCurrentTuple)
        ? ReplayCurrentTupleV2.fromJSON(object.replayCurrentTuple)
        : undefined,
      evaluateExpression: isSet(object.evaluateExpression)
        ? EvaluateExpressionV2.fromJSON(object.evaluateExpression)
        : undefined,
      workerDebugCommand: isSet(object.workerDebugCommand)
        ? WorkerDebugCommandV2.fromJSON(object.workerDebugCommand)
        : undefined,
      workerExecutionCompleted: isSet(object.workerExecutionCompleted)
        ? WorkerExecutionCompletedV2.fromJSON(object.workerExecutionCompleted)
        : undefined,
      noOp: isSet(object.noOp) ? NoOpV2.fromJSON(object.noOp) : undefined,
    };
  },

  toJSON(message: ControlCommandV2): unknown {
    const obj: any = {};
    if (message.startWorker !== undefined) {
      obj.startWorker = StartWorkerV2.toJSON(message.startWorker);
    }
    if (message.pauseWorker !== undefined) {
      obj.pauseWorker = PauseWorkerV2.toJSON(message.pauseWorker);
    }
    if (message.resumeWorker !== undefined) {
      obj.resumeWorker = ResumeWorkerV2.toJSON(message.resumeWorker);
    }
    if (message.assignPort !== undefined) {
      obj.assignPort = AssignPortV2.toJSON(message.assignPort);
    }
    if (message.addPartitioning !== undefined) {
      obj.addPartitioning = AddPartitioningV2.toJSON(message.addPartitioning);
    }
    if (message.addInputChannel !== undefined) {
      obj.addInputChannel = AddInputChannelV2.toJSON(message.addInputChannel);
    }
    if (message.queryStatistics !== undefined) {
      obj.queryStatistics = QueryStatisticsV2.toJSON(message.queryStatistics);
    }
    if (message.queryCurrentInputTuple !== undefined) {
      obj.queryCurrentInputTuple = QueryCurrentInputTupleV2.toJSON(message.queryCurrentInputTuple);
    }
    if (message.openExecutor !== undefined) {
      obj.openExecutor = OpenExecutorV2.toJSON(message.openExecutor);
    }
    if (message.portCompleted !== undefined) {
      obj.portCompleted = PortCompletedV2.toJSON(message.portCompleted);
    }
    if (message.schedulerTimeSlotEvent !== undefined) {
      obj.schedulerTimeSlotEvent = SchedulerTimeSlotEventV2.toJSON(message.schedulerTimeSlotEvent);
    }
    if (message.initializeExecutor !== undefined) {
      obj.initializeExecutor = InitializeExecutorV2.toJSON(message.initializeExecutor);
    }
    if (message.updateExecutor !== undefined) {
      obj.updateExecutor = UpdateExecutorV2.toJSON(message.updateExecutor);
    }
    if (message.pythonConsoleMessage !== undefined) {
      obj.pythonConsoleMessage = PythonConsoleMessageV2.toJSON(message.pythonConsoleMessage);
    }
    if (message.replayCurrentTuple !== undefined) {
      obj.replayCurrentTuple = ReplayCurrentTupleV2.toJSON(message.replayCurrentTuple);
    }
    if (message.evaluateExpression !== undefined) {
      obj.evaluateExpression = EvaluateExpressionV2.toJSON(message.evaluateExpression);
    }
    if (message.workerDebugCommand !== undefined) {
      obj.workerDebugCommand = WorkerDebugCommandV2.toJSON(message.workerDebugCommand);
    }
    if (message.workerExecutionCompleted !== undefined) {
      obj.workerExecutionCompleted = WorkerExecutionCompletedV2.toJSON(message.workerExecutionCompleted);
    }
    if (message.noOp !== undefined) {
      obj.noOp = NoOpV2.toJSON(message.noOp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ControlCommandV2>, I>>(base?: I): ControlCommandV2 {
    return ControlCommandV2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ControlCommandV2>, I>>(object: I): ControlCommandV2 {
    const message = createBaseControlCommandV2();
    message.startWorker =
      object.startWorker !== undefined && object.startWorker !== null
        ? StartWorkerV2.fromPartial(object.startWorker)
        : undefined;
    message.pauseWorker =
      object.pauseWorker !== undefined && object.pauseWorker !== null
        ? PauseWorkerV2.fromPartial(object.pauseWorker)
        : undefined;
    message.resumeWorker =
      object.resumeWorker !== undefined && object.resumeWorker !== null
        ? ResumeWorkerV2.fromPartial(object.resumeWorker)
        : undefined;
    message.assignPort =
      object.assignPort !== undefined && object.assignPort !== null
        ? AssignPortV2.fromPartial(object.assignPort)
        : undefined;
    message.addPartitioning =
      object.addPartitioning !== undefined && object.addPartitioning !== null
        ? AddPartitioningV2.fromPartial(object.addPartitioning)
        : undefined;
    message.addInputChannel =
      object.addInputChannel !== undefined && object.addInputChannel !== null
        ? AddInputChannelV2.fromPartial(object.addInputChannel)
        : undefined;
    message.queryStatistics =
      object.queryStatistics !== undefined && object.queryStatistics !== null
        ? QueryStatisticsV2.fromPartial(object.queryStatistics)
        : undefined;
    message.queryCurrentInputTuple =
      object.queryCurrentInputTuple !== undefined && object.queryCurrentInputTuple !== null
        ? QueryCurrentInputTupleV2.fromPartial(object.queryCurrentInputTuple)
        : undefined;
    message.openExecutor =
      object.openExecutor !== undefined && object.openExecutor !== null
        ? OpenExecutorV2.fromPartial(object.openExecutor)
        : undefined;
    message.portCompleted =
      object.portCompleted !== undefined && object.portCompleted !== null
        ? PortCompletedV2.fromPartial(object.portCompleted)
        : undefined;
    message.schedulerTimeSlotEvent =
      object.schedulerTimeSlotEvent !== undefined && object.schedulerTimeSlotEvent !== null
        ? SchedulerTimeSlotEventV2.fromPartial(object.schedulerTimeSlotEvent)
        : undefined;
    message.initializeExecutor =
      object.initializeExecutor !== undefined && object.initializeExecutor !== null
        ? InitializeExecutorV2.fromPartial(object.initializeExecutor)
        : undefined;
    message.updateExecutor =
      object.updateExecutor !== undefined && object.updateExecutor !== null
        ? UpdateExecutorV2.fromPartial(object.updateExecutor)
        : undefined;
    message.pythonConsoleMessage =
      object.pythonConsoleMessage !== undefined && object.pythonConsoleMessage !== null
        ? PythonConsoleMessageV2.fromPartial(object.pythonConsoleMessage)
        : undefined;
    message.replayCurrentTuple =
      object.replayCurrentTuple !== undefined && object.replayCurrentTuple !== null
        ? ReplayCurrentTupleV2.fromPartial(object.replayCurrentTuple)
        : undefined;
    message.evaluateExpression =
      object.evaluateExpression !== undefined && object.evaluateExpression !== null
        ? EvaluateExpressionV2.fromPartial(object.evaluateExpression)
        : undefined;
    message.workerDebugCommand =
      object.workerDebugCommand !== undefined && object.workerDebugCommand !== null
        ? WorkerDebugCommandV2.fromPartial(object.workerDebugCommand)
        : undefined;
    message.workerExecutionCompleted =
      object.workerExecutionCompleted !== undefined && object.workerExecutionCompleted !== null
        ? WorkerExecutionCompletedV2.fromPartial(object.workerExecutionCompleted)
        : undefined;
    message.noOp = object.noOp !== undefined && object.noOp !== null ? NoOpV2.fromPartial(object.noOp) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
